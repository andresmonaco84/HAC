create or replace PROCEDURE   "PRC_PEP_CORRIGE_PES_PAC" (pCAD_PES_ID_PESSOA_CERTA   IN TB_CAD_PES_PESSOA.CAD_PES_ID_PESSOA%TYPE DEFAULT NULL,
                                                    pCAD_PES_ID_PESSOA_ERRADA  IN TB_CAD_PES_PESSOA.CAD_PES_ID_PESSOA%TYPE DEFAULT NULL,
                                                    pATD_ATE_ID                IN TB_ATD_ATE_ATENDIMENTO.ATD_ATE_ID%TYPE DEFAULT NULL,
                                                    pCAD_PAC_ID_PACIENTE_CERTO  IN TB_CAD_PAC_PACIENTE.CAD_PAC_ID_PACIENTE%TYPE DEFAULT NULL,
                                                    pCAD_PAC_ID_PACIENTE_ERRADO IN TB_CAD_PAC_PACIENTE.CAD_PAC_ID_PACIENTE%TYPE DEFAULT NULL,                                                    
                                                    pTIPO_CORRECAO              IN NUMBER,
                                                    pSEG_USU_ID_USUARIO         IN TB_CAD_PES_LOG_CORRECAO.SEG_USU_ID_USUARIO%TYPE )
/*
TIPO_CORRECAO = 1 CORRIGE PESSOA DUPLICADA, PARAMETROS: pCAD_PES_ID_PESSOA_CERTA / PTIPO_CORRECAO = 1
TIPO_CORRECAO = 2 CORRIGE PESSOA COM CADASTRO ERRADO, PARAMETROS: pCAD_PES_ID_PESSOA_CERTA / pCAD_PES_ID_PESSOA_ERRADA / PTIPO_CORRECAO = 2
TIPO_CORRECAO = 3 TROCA PACIENTE DO ATENDIMENTO PASSADO COMO PARAMETRO
TIPO_CORRECAO = 4 TROCA CORRIGE PACIENTE DAS TABELAS (ERRADO=>CERTO)
*/
IS
  /********************************************************************
  *    Procedure: PRC_PEP_CORRIGE_PES_PAC
  *
  *    Data Criacao: 	04/2012       Por: RICARDO COSTA
  *    Data Alteracao:	              Por:
  *         alterac?o:
  *    Funcao: Corrige pessoa paciente e suas dependencias
  *
  *******************************************************************/
pASS_PMD_NM_PESSOA       TB_ASS_PMD_PESSOA_MD5.ASS_PMD_NM_PESSOA%TYPE;
pASS_PMD_DT_NASCIMENTO   TB_ASS_PMD_PESSOA_MD5.ASS_PMD_DT_NASCIMENTO%TYPE;
pASS_PMD_TP_SEXO         TB_ASS_PMD_PESSOA_MD5.ASS_PMD_TP_SEXO%TYPE;
pASS_PMD_ID              TB_ASS_PMD_PESSOA_MD5.ASS_PMD_ID%TYPE;
pMD5                     VARCHAR2(32);
pPACIENTE_CORRETO        TB_CAD_PAC_PACIENTE.CAD_PAC_ID_PACIENTE%TYPE;
pPACIENTE_ERRADO         TB_CAD_PAC_PACIENTE.CAD_PAC_ID_PACIENTE%TYPE;
V_ID                     TB_CAD_PES_LOG_CORRECAO.ID%TYPE;
--====================================================================================================
PROCEDURE LOG_CORRECAO(ppID                        IN OUT NUMBER,
                       ppCAD_PES_ID_PESSOA_CERTA   IN TB_CAD_PES_PESSOA.CAD_PES_ID_PESSOA%TYPE DEFAULT NULL,
                       ppCAD_PES_ID_PESSOA_ERRADA  IN TB_CAD_PES_PESSOA.CAD_PES_ID_PESSOA%TYPE DEFAULT NULL,
                       ppATD_ATE_ID                IN TB_ATD_ATE_ATENDIMENTO.ATD_ATE_ID%TYPE DEFAULT NULL,
                       ppCAD_PAC_ID_PACIENTE_CERTO  IN TB_CAD_PAC_PACIENTE.CAD_PAC_ID_PACIENTE%TYPE DEFAULT NULL,
                       ppCAD_PAC_ID_PACIENTE_ERRADO IN TB_CAD_PAC_PACIENTE.CAD_PAC_ID_PACIENTE%TYPE DEFAULT NULL,                                                    
                       ppROTINA                     IN TB_CAD_PES_LOG_CORRECAO.ROTINA%TYPE,
                       ppPRONTUARIO                 IN TB_CAD_PES_LOG_CORRECAO.PRONTUARIO%TYPE  DEFAULT NULL,
                       ppTIPO_CORRECAO IN NUMBER,
                       ppSEG_USU_ID_USUARIO         IN TB_CAD_PES_LOG_CORRECAO.SEG_USU_ID_USUARIO%TYPE) IS
BEGIN 
   IF ( ppID = 0 ) THEN
     SELECT SEQ_PES_LOG.NEXTVAL INTO ppID FROM DUAL;
   END IF;
   INSERT INTO TB_CAD_PES_LOG_CORRECAO 
   ( ID,          
     TIPO ,                CAD_PES_ID_PESSOA_ERRADA ,   CAD_PES_ID_PESSOA_CERTA ,
     ATD_ATE_ID,           CAD_PAC_ID_PACIENTE_CERTO,   CAD_PAC_ID_PACIENTE_ERRADO,
     DATA,                 ROTINA,                      SEG_USU_ID_USUARIO,
     PRONTUARIO )
    VALUES
   ( ppID, 
     ppTIPO_CORRECAO,      ppCAD_PES_ID_PESSOA_ERRADA,  ppCAD_PES_ID_PESSOA_CERTA,
     ppATD_ATE_ID,         ppCAD_PAC_ID_PACIENTE_CERTO, ppCAD_PAC_ID_PACIENTE_ERRADO,
     SYSDATE,              ppROTINA,                    ppSEG_USU_ID_USUARIO,
     ppPRONTUARIO );
END LOG_CORRECAO;
--====================================================================================================
FUNCTION GERA_MD5(sNome IN VARCHAR, dData IN DATE, sSexo IN CHAR) RETURN VARCHAR2 IS
nome VARCHAR2(100);
data VARCHAR2(8);
BEGIN
     BEGIN
          SELECT TRIM(REPLACE(sNome,' ','')) , TO_CHAR(dData,'DDMMYYYY')
          INTO   nome,                         data
          FROM DUAL;
     END;
     RETURN MD5(TRIM(nome||data||sSexo));
END GERA_MD5;
--====================================================================================================
PROCEDURE DESABILITA_PESSOA(pASS_PMD_ID IN TB_ASS_PMD_PESSOA_MD5.ASS_PMD_ID%TYPE) IS
BEGIN
    UPDATE TB_ASS_PMD_PESSOA_MD5 SET
       ASS_PMD_DT_DESATIVACAO         = SYSDATE,
       SEG_USU_ID_USUARIO_DESATIVACAO = 1
    WHERE ASS_PMD_ID = pASS_PMD_ID
    AND   ASS_PMD_DT_DESATIVACAO IS NULL;
END DESABILITA_PESSOA;
--====================================================================================================
/*
   Procedure alterada removendo insert e select completos e substituidos por cursor com select * , para garantir que novas colunas adicionadas posteriormente n√£o fiquem fora da copia
*/
PROCEDURE CORRIGE_HISTORICO(pPACIENTE_CORRETO IN TB_CAD_PAC_PACIENTE.CAD_PAC_ID_PACIENTE%TYPE, pPACIENTE_ERRADO  IN TB_CAD_PAC_PACIENTE.CAD_PAC_ID_PACIENTE%TYPE) IS
CURSOR cursorFAT_COC_CONTA_CONSUMO IS 
   SELECT * FROM TB_FAT_COC_CONTA_CONSUMO WHERE CAD_PAC_ID_PACIENTE = pPACIENTE_ERRADO;
linhaFAT_COC_CONTA_CONSUMO TB_FAT_COC_CONTA_CONSUMO%ROWTYPE;
CURSOR cursorFAT_CCP_CONTA_CONS_PARC IS 
   SELECT * FROM TB_FAT_CCP_CONTA_CONS_PARC WHERE CAD_PAC_ID_PACIENTE = pPACIENTE_ERRADO;
linhaFAT_CCP_CONTA_CONS_PARC TB_FAT_CCP_CONTA_CONS_PARC%ROWTYPE;
-- TSS_SPSADT_SGS
CURSOR curTSS_SPSADT_SGS IS 
   SELECT * FROM TSS_SPSADT_SGS WHERE IDT_PACIENTE   = pPACIENTE_ERRADO;   
linhaTSS_SPSADT_SGS TSS_SPSADT_SGS%ROWTYPE;
BEGIN
   UPDATE TB_AGE_AGC_AGENDA_CANCELADA  SET CAD_PAC_ID_PACIENTE     = pPACIENTE_CORRETO WHERE CAD_PAC_ID_PACIENTE     = pPACIENTE_ERRADO;
   UPDATE TB_AGE_AGD_AGENDA            SET CAD_PAC_ID_PACIENTE     = pPACIENTE_CORRETO WHERE CAD_PAC_ID_PACIENTE     = pPACIENTE_ERRADO;   
   UPDATE TB_AGE_TRA_TRANSF_AGENDA     SET CAD_PAC_ID_PACIENTE     = pPACIENTE_CORRETO WHERE CAD_PAC_ID_PACIENTE     = pPACIENTE_ERRADO;   
   UPDATE TB_AGS_AGC_AGENDA_CANC_SADT  SET CAD_PAC_ID_PACIENTE     = pPACIENTE_CORRETO WHERE CAD_PAC_ID_PACIENTE     = pPACIENTE_ERRADO;   
   UPDATE TB_AGS_AGE_AGENDA_SADT       SET CAD_PAC_ID_PACIENTE     = pPACIENTE_CORRETO WHERE CAD_PAC_ID_PACIENTE     = pPACIENTE_ERRADO;   
   UPDATE TB_ASS_PAP_PAC_ATEN_PROC     SET CAD_PAC_ID_PACIENTE     = pPACIENTE_CORRETO WHERE CAD_PAC_ID_PACIENTE     = pPACIENTE_ERRADO;   
   UPDATE TB_ASS_PAT_PACIEATEND        SET CAD_PAC_ID_PACIENTE     = pPACIENTE_CORRETO WHERE CAD_PAC_ID_PACIENTE     = pPACIENTE_ERRADO;   
   UPDATE TB_ASS_PPG_PAC_ATE_PROC_GUIA SET CAD_PAC_ID_PACIENTE     = pPACIENTE_CORRETO WHERE CAD_PAC_ID_PACIENTE     = pPACIENTE_ERRADO;   
   UPDATE TB_ATD_GUI_GUIAATEND         SET CAD_PAC_ID_PACIENTE     = pPACIENTE_CORRETO WHERE CAD_PAC_ID_PACIENTE     = pPACIENTE_ERRADO;   
   UPDATE TB_ATD_IAE_INT_AGE_ELETIVA   SET CAD_PAC_ID_PACIENTE     = pPACIENTE_CORRETO WHERE CAD_PAC_ID_PACIENTE     = pPACIENTE_ERRADO;   
   UPDATE TB_ATD_IML_INT_MOV_LEITO     SET CAD_PAC_ID_PACIENTE     = pPACIENTE_CORRETO WHERE CAD_PAC_ID_PACIENTE     = pPACIENTE_ERRADO;   
   UPDATE TB_ATS_ATE_ATENDIMENTO_SADT  SET CAD_PAC_ID_PACIENTE_INT = pPACIENTE_CORRETO WHERE CAD_PAC_ID_PACIENTE_INT = pPACIENTE_ERRADO;   
   UPDATE TB_COB_MGC_MOV_GUIA_COBRANCA SET CAD_PAC_ID_PACIENTE     = pPACIENTE_CORRETO WHERE CAD_PAC_ID_PACIENTE     = pPACIENTE_ERRADO;   
   UPDATE TB_FAT_AFR_ATEND_FATUR_RES   SET CAD_PAC_ID_PACIENTE     = pPACIENTE_CORRETO WHERE CAD_PAC_ID_PACIENTE     = pPACIENTE_ERRADO;
   OPEN cursorFAT_COC_CONTA_CONSUMO;
   LOOP
      FETCH cursorFAT_COC_CONTA_CONSUMO INTO lInhaFAT_COC_CONTA_CONSUMO;
      EXIT WHEN cursorFAT_COC_CONTA_CONSUMO%NOTFOUND;
      linhaFAT_COC_CONTA_CONSUMO.CAD_PAC_ID_PACIENTE := pPACIENTE_CORRETO;
      INSERT INTO TB_FAT_COC_CONTA_CONSUMO VALUES linhaFAT_COC_CONTA_CONSUMO;   
   END LOOP;
   CLOSE cursorFAT_COC_CONTA_CONSUMO;
   OPEN cursorFAT_CCP_CONTA_CONS_PARC;
   LOOP
      FETCH cursorFAT_CCP_CONTA_CONS_PARC INTO linhaFAT_CCP_CONTA_CONS_PARC;
      EXIT WHEN cursorFAT_CCP_CONTA_CONS_PARC%NOTFOUND;
      linhaFAT_CCP_CONTA_CONS_PARC.CAD_PAC_ID_PACIENTE := pPACIENTE_CORRETO;
      INSERT INTO TB_FAT_CCP_CONTA_CONS_PARC VALUES linhaFAT_CCP_CONTA_CONS_PARC;
   END LOOP;
   CLOSE cursorFAT_CCP_CONTA_CONS_PARC;
   UPDATE TB_FAT_CCI_CONTA_CONSU_ITEM SET  CAD_PAC_ID_PACIENTE = pPACIENTE_CORRETO WHERE CAD_PAC_ID_PACIENTE = pPACIENTE_ERRADO;          
   UPDATE TB_REP_PGM_PAGTO_MEDICO     SET  CAD_PAC_ID_PACIENTE = pPACIENTE_CORRETO WHERE CAD_PAC_ID_PACIENTE = pPACIENTE_ERRADO;   
   DELETE TB_FAT_CCP_CONTA_CONS_PARC WHERE CAD_PAC_ID_PACIENTE = pPACIENTE_ERRADO;       
   DELETE TB_FAT_COC_CONTA_CONSUMO   WHERE CAD_PAC_ID_PACIENTE = pPACIENTE_ERRADO;    
   UPDATE TB_FAT_FCL_CONTR_EMI_LOTE      SET CAD_PAC_ID_PACIENTE = pPACIENTE_CORRETO WHERE CAD_PAC_ID_PACIENTE = pPACIENTE_ERRADO;   
   UPDATE TB_IEL_INTERF_EXAMES_LAB       SET CAD_PAC_ID_PACIENTE = pPACIENTE_CORRETO WHERE CAD_PAC_ID_PACIENTE = pPACIENTE_ERRADO;   
   UPDATE TB_REP_PGM_PAGTO_MEDICO        SET CAD_PAC_ID_PACIENTE = pPACIENTE_CORRETO WHERE CAD_PAC_ID_PACIENTE = pPACIENTE_ERRADO;   
   UPDATE TB_TMP_CPR_CONTA_PARC_REL      SET CAD_PAC_ID_PACIENTE = pPACIENTE_CORRETO WHERE CAD_PAC_ID_PACIENTE = pPACIENTE_ERRADO;
   UPDATE TSS_SOLIC_INT_OPM_SGS          SET IDT_PACIENTE = pPACIENTE_CORRETO WHERE IDT_PACIENTE = pPACIENTE_ERRADO;
   UPDATE TSS_SOLIC_INT_PROC_SGS         SET IDT_PACIENTE = pPACIENTE_CORRETO WHERE IDT_PACIENTE = pPACIENTE_ERRADO;
   UPDATE TSS_SOLIC_INT_PRORROG_PROC_SGS SET IDT_PACIENTE = pPACIENTE_CORRETO WHERE IDT_PACIENTE = pPACIENTE_ERRADO;
   UPDATE TSS_SOLIC_INT_PRORROG_SGS      SET IDT_PACIENTE = pPACIENTE_CORRETO WHERE IDT_PACIENTE = pPACIENTE_ERRADO;
   UPDATE TSS_SOLIC_INT_SGS              SET IDT_PACIENTE = pPACIENTE_CORRETO WHERE IDT_PACIENTE = pPACIENTE_ERRADO;
   UPDATE TSS_SOLIC_PRORROG_OPM_SGS      SET IDT_PACIENTE = pPACIENTE_CORRETO WHERE IDT_PACIENTE = pPACIENTE_ERRADO;
   UPDATE TSS_SPSADT_OPM_SOL_SGS         SET IDT_PACIENTE = pPACIENTE_CORRETO WHERE IDT_PACIENTE = pPACIENTE_ERRADO;
   UPDATE TSS_SPSADT_OPM_UTIL_SGS        SET IDT_PACIENTE = pPACIENTE_CORRETO WHERE IDT_PACIENTE = pPACIENTE_ERRADO;
   UPDATE TSS_SPSADT_PROC_EQUIPE_SGS     SET IDT_PACIENTE = pPACIENTE_CORRETO WHERE IDT_PACIENTE = pPACIENTE_ERRADO;
   OPEN curTSS_SPSADT_SGS;
   LOOP
      FETCH curTSS_SPSADT_SGS INTO linhaTSS_SPSADT_SGS;
      EXIT WHEN curTSS_SPSADT_SGS%NOTFOUND;
      linhaTSS_SPSADT_SGS.IDT_PACIENTE := pPACIENTE_CORRETO;
      INSERT INTO TSS_SPSADT_SGS VALUES linhaTSS_SPSADT_SGS;   
   END LOOP;
   CLOSE curTSS_SPSADT_SGS;
   UPDATE TSS_SPSADT_PROC_REAL_SGS PROC_REAL SET PROC_REAL.IDT_PACIENTE = pPACIENTE_CORRETO WHERE PROC_REAL.IDT_PACIENTE = pPACIENTE_ERRADO;
   UPDATE TSS_SPSADT_PROC_SOL_SGS PROC_SOL   SET PROC_SOL.IDT_PACIENTE = pPACIENTE_CORRETO  WHERE PROC_SOL.IDT_PACIENTE  = pPACIENTE_ERRADO;
   DELETE TSS_SPSADT_SGS SPSADT WHERE SPSADT.IDT_PACIENTE = pPACIENTE_ERRADO;
   EXCEPTION
      WHEN OTHERS THEN
         ROLLBACK;
         RAISE_APPLICATION_ERROR(-20001,' PROBLEMA CORRIGINDO HISTORICO ! '||' PACIENTE CORRETO '||TO_CHAR(pPACIENTE_CORRETO)||
                                        ' PACIENTE ERRADO '||TO_CHAR(pPACIENTE_ERRADO)|| SQLERRM);
END CORRIGE_HISTORICO;
--====================================================================================================
PROCEDURE CORRIGE_PACIENTE( pPESSOA_CERTA          IN NUMBER, 
                            pPESSOA_ERRADA         IN NUMBER ) IS
BEGIN
   FOR cPACIENTE IN
   ( SELECT  PLA.CAD_PLA_CD_PLANO_HAC,   PLA.CAD_PLA_CD_TIPOPLANO,   PAC.CAD_PES_ID_PESSOA,
             PAC.CAD_PAC_ID_PACIENTE,
             PAC.CAD_CNV_ID_CONVENIO,    PAC.CAD_PLA_ID_PLANO,
             PAC.CAD_PAC_CD_CREDENCIAL,
             PAC.CAD_PAC_CD_CODBEN,      PAC.CAD_PAC_CD_CODBENSEQ,
             PAC.CAD_EMP_ID_EMPRESA,     PAC.CAD_PAC_NR_PRONTUARIO,
             PAC.CAD_PAC_NM_TITULAR,     PAC.CAD_PAC_DT_VALIDADECREDENCIAL, PAC.CAD_PAC_CD_CNS,
             PAC.CAD_PAC_DS_OBSERVACAO,  PAC.CAD_PAC_FL_VIP_OK,             PAC.CAD_PAC_CD_CODCIP,
             PAC.CAD_PAC_CD_SUBPLANO,    PAC.CAD_PAC_FL_RESTRICAO_PA_OK,
             PAC.CAD_PAC_DT_ULTIMA_ATUALIZACAO
   FROM TB_CAD_PAC_PACIENTE PAC,
        TB_CAD_PLA_PLANO    PLA
   WHERE PLA.CAD_PLA_ID_PLANO = PAC.CAD_PLA_ID_PLANO
   AND   PAC.CAD_PES_ID_PESSOA = pPESSOA_ERRADA )
   LOOP
      pPACIENTE_CORRETO := NULL;
      pPACIENTE_ERRADO  := cPACIENTE.CAD_PAC_ID_PACIENTE;
      BEGIN
         -- ATUALIZA PESSOA NO PACIENTE
         IF ( cPACIENTE.CAD_PAC_CD_CREDENCIAL IS NULL ) THEN 
            -- ATUALIZA PESSOA NO PACIENTE
            UPDATE TB_CAD_PAC_PACIENTE SET
             CAD_PES_ID_PESSOA = pPESSOA_CERTA
            WHERE CAD_CNV_ID_CONVENIO   = cPACIENTE.CAD_CNV_ID_CONVENIO
            AND   CAD_PLA_ID_PLANO      = cPACIENTE.CAD_PLA_ID_PLANO
            AND   CAD_PAC_CD_CREDENCIAL IS NULL
            AND   CAD_PES_ID_PESSOA     = pPESSOA_ERRADA;                                            
         ELSE
            -- ATUALIZA PESSOA NO PACIENTE
            UPDATE TB_CAD_PAC_PACIENTE SET
             CAD_PES_ID_PESSOA = pPESSOA_CERTA
            WHERE CAD_CNV_ID_CONVENIO   = cPACIENTE.CAD_CNV_ID_CONVENIO
            AND   CAD_PLA_ID_PLANO      = cPACIENTE.CAD_PLA_ID_PLANO
            AND   CAD_PAC_CD_CREDENCIAL = cPACIENTE.CAD_PAC_CD_CREDENCIAL
            AND   CAD_PES_ID_PESSOA     = pPESSOA_ERRADA;                      
         END IF;                
         -- SEMPRE TENTA ATUALIZAR O RESPONSAVEL
         UPDATE TB_ASS_ARE_ATD_RESPONSAVEL SET
         CAD_PES_ID_PESSOA = pPESSOA_CERTA
         WHERE CAD_PES_ID_PESSOA = pPESSOA_ERRADA;
                  
         -- ATUALIZA TRIAGEM
         UPDATE TB_CAD_TRI_TRIAGEM SET
         CAD_PES_ID_PESSOA = pPESSOA_CERTA
         WHERE CAD_PES_ID_PESSOA = pPESSOA_ERRADA;
                  
      EXCEPTION
         WHEN DUP_VAL_ON_INDEX THEN
         -- JA EXISTE PACIENTE COM ESTA PESSOA, BUSCA ID_PACIENTE PARA ATUALIZAR REGISTROS
         -- DESTE PACIENTE COM O DELE
         -- CAD_CNV_ID_CONVENIO, CAD_PLA_ID_PLANO, CAD_PES_ID_PESSOA, CAD_PAC_CD_CREDENCIAL
         BEGIN
             IF ( cPACIENTE.CAD_PAC_CD_CREDENCIAL IS NULL ) THEN 
                SELECT PAC_.CAD_PAC_ID_PACIENTE
                INTO   pPACIENTE_CORRETO
                FROM TB_CAD_PAC_PACIENTE PAC_
                WHERE PAC_.CAD_CNV_ID_CONVENIO   = cPACIENTE.CAD_CNV_ID_CONVENIO
                AND   PAC_.CAD_PLA_ID_PLANO      = cPACIENTE.CAD_PLA_ID_PLANO
                AND   PAC_.CAD_PAC_CD_CREDENCIAL IS NULL
                AND   PAC_.CAD_PES_ID_PESSOA     = pPESSOA_CERTA;                                                        
             ELSE
                SELECT PAC_.CAD_PAC_ID_PACIENTE
                INTO   pPACIENTE_CORRETO
                FROM TB_CAD_PAC_PACIENTE PAC_
                WHERE PAC_.CAD_CNV_ID_CONVENIO   = cPACIENTE.CAD_CNV_ID_CONVENIO
                AND   PAC_.CAD_PLA_ID_PLANO      = cPACIENTE.CAD_PLA_ID_PLANO
                AND   PAC_.CAD_PAC_CD_CREDENCIAL = cPACIENTE.CAD_PAC_CD_CREDENCIAL
                AND   PAC_.CAD_PES_ID_PESSOA     = pPESSOA_CERTA;                            
             END IF;
             -- CORRE√á√ÉO DO HISTORICO DE MOVIMENTACAO
             CORRIGE_HISTORICO(pPACIENTE_CORRETO, pPACIENTE_ERRADO);
             -- FIM CORRECAO HISTORICO MOVIMENTACAO
                -- EXCLUI PACIENTE DUPLICADO
            -- SEMPRE TENTA ATUALIZAR O RESPONSAVEL
            BEGIN
               UPDATE TB_ASS_ARE_ATD_RESPONSAVEL SET
               CAD_PES_ID_PESSOA = pPESSOA_CERTA
               WHERE CAD_PES_ID_PESSOA = pPESSOA_ERRADA;
               
            -- ATUALIZA TRIAGEM
            UPDATE TB_CAD_TRI_TRIAGEM SET
            CAD_PES_ID_PESSOA = pPESSOA_CERTA
            WHERE CAD_PES_ID_PESSOA = pPESSOA_ERRADA;
               
               
           EXCEPTION
               WHEN OTHERS THEN
                  RAISE_APPLICATION_ERROR(-20001,' ERRO CORRIGINDO RESPONSAVEL '||SQLERRM);               
            END;

             BEGIN
                  LOG_CORRECAO(V_ID, -- ID
                               pPESSOA_CERTA, -- pCAD_PES_ID_PESSOA_CERTA,
                               pPESSOA_ERRADA, -- PESSOA ERRADA
                               NULL,    -- ppATD_ATE_ID
                               pPACIENTE_CORRETO,    -- ppCAD_PAC_ID_PACIENTE_CERTO  
                               pPACIENTE_ERRADO,    -- ppCAD_PAC_ID_PACIENTE_ERRADO
                               'CORRIGE_PACIENTE', -- ROTINA                     
                               cPACIENTE.Cad_Pac_Nr_Prontuario, -- PRONTUARIO
                               PTIPO_CORRECAO,       -- ppTIPO_CORRECAO
                               pSEG_USU_ID_USUARIO
                  );
                DELETE TB_CAD_PAC_PACIENTE WHERE CAD_PAC_ID_PACIENTE = pPACIENTE_ERRADO;
             END;
         EXCEPTION
           WHEN NO_DATA_FOUND THEN
              RAISE_APPLICATION_ERROR(-20001,' PESQUISA DE PACIENTE DUPLICADO N√ÉO RETORNOU NADA ');
           WHEN OTHERS THEN
              RAISE_APPLICATION_ERROR(-20001,' ERRO CORRIGINDO PACIENTE '||SQLERRM);
         END;
      END;
   END LOOP; -- CORRIGE PACIENTE
END CORRIGE_PACIENTE;
--====================================================================================================
PROCEDURE CORRIGE_HIST_POR_ATENDIMENTO (pPACIENTE_CORRETO IN TB_CAD_PAC_PACIENTE.CAD_PAC_ID_PACIENTE%TYPE, 
                                        pPACIENTE_ERRADO  IN TB_CAD_PAC_PACIENTE.CAD_PAC_ID_PACIENTE%TYPE,
                                        pATD_ATE_ID       IN TB_ATD_ATE_ATENDIMENTO.ATD_ATE_ID%TYPE DEFAULT NULL
                                        ) IS
CURSOR cursorFAT_COC_CONTA_CONSUMO IS 
   SELECT * FROM TB_FAT_COC_CONTA_CONSUMO WHERE CAD_PAC_ID_PACIENTE = pPACIENTE_ERRADO AND ATD_ATE_ID          = pATD_ATE_ID;
linhaFAT_COC_CONTA_CONSUMO TB_FAT_COC_CONTA_CONSUMO%ROWTYPE;
CURSOR cursorFAT_CCP_CONTA_CONS_PARC IS 
   SELECT * FROM TB_FAT_CCP_CONTA_CONS_PARC WHERE CAD_PAC_ID_PACIENTE = pPACIENTE_ERRADO AND ATD_ATE_ID = pATD_ATE_ID;
linhaFAT_CCP_CONTA_CONS_PARC TB_FAT_CCP_CONTA_CONS_PARC%ROWTYPE;
CURSOR curCOB_CCP_CONTA_CONS_PARC IS 
   SELECT * FROM TB_COB_CCP_CONTA_CONS_PARC WHERE  CAD_PAC_ID_PACIENTE = pPACIENTE_ERRADO AND ATD_ATE_ID = pATD_ATE_ID;
linhaCOB_CCP_CONTA_CONS_PARC TB_COB_CCP_CONTA_CONS_PARC%ROWTYPE;   
CURSOR curTB_COB_CCP_CONTA_HISTORICO IS 
   SELECT * FROM TB_COB_CCP_CONTA_HISTORICO WHERE  CAD_PAC_ID_PACIENTE = pPACIENTE_ERRADO AND ATD_ATE_ID = pATD_ATE_ID;
linhaCOB_CCP_CONTA_HISTORICO TB_COB_CCP_CONTA_HISTORICO%ROWTYPE;
-- TSS_SPSADT_SGS
CURSOR curTSS_SPSADT_SGS IS 
   SELECT * FROM TSS_SPSADT_SGS WHERE IDT_PACIENTE   = pPACIENTE_ERRADO AND NR_ATENDIMENTO = pATD_ATE_ID;   
linhaTSS_SPSADT_SGS TSS_SPSADT_SGS%ROWTYPE;
BEGIN
   UPDATE TB_AGE_AGC_AGENDA_CANCELADA AGC  SET AGC.CAD_PAC_ID_PACIENTE     = pPACIENTE_CORRETO WHERE AGC.CAD_PAC_ID_PACIENTE     = pPACIENTE_ERRADO AND AGC.AGE_AGD_CD_INTAMB = pATD_ATE_ID;
   UPDATE TB_AGE_AGD_AGENDA AGD            SET AGD.CAD_PAC_ID_PACIENTE     = pPACIENTE_CORRETO WHERE AGD.CAD_PAC_ID_PACIENTE     = pPACIENTE_ERRADO AND AGD.AGE_AGD_CD_INTAMB = pATD_ATE_ID; 
   UPDATE TB_AGS_AGC_AGENDA_CANC_SADT AGC  SET AGC.CAD_PAC_ID_PACIENTE     = pPACIENTE_CORRETO WHERE AGC.CAD_PAC_ID_PACIENTE     = pPACIENTE_ERRADO AND AGC.AGS_AGE_CD_INTAMB = pATD_ATE_ID;
   UPDATE TB_AGS_AGE_AGENDA_SADT AGS       SET AGS.CAD_PAC_ID_PACIENTE     = pPACIENTE_CORRETO WHERE AGS.CAD_PAC_ID_PACIENTE     = pPACIENTE_ERRADO AND AGS.AGS_AGE_CD_INTAMB = pATD_ATE_ID;   
   UPDATE TB_ASS_PAP_PAC_ATEN_PROC PAP     SET PAP.CAD_PAC_ID_PACIENTE     = pPACIENTE_CORRETO WHERE PAP.CAD_PAC_ID_PACIENTE     = pPACIENTE_ERRADO AND PAP.ATD_ATE_ID        = pATD_ATE_ID;
   UPDATE TB_ASS_PAT_PACIEATEND PAT        SET PAT.CAD_PAC_ID_PACIENTE     = pPACIENTE_CORRETO WHERE PAT.CAD_PAC_ID_PACIENTE     = pPACIENTE_ERRADO AND PAT.ATD_ATE_ID        = pATD_ATE_ID;   
   UPDATE TB_ASS_PPG_PAC_ATE_PROC_GUIA PPG SET PPG.CAD_PAC_ID_PACIENTE     = pPACIENTE_CORRETO WHERE PPG.CAD_PAC_ID_PACIENTE     = pPACIENTE_ERRADO AND PPG.ATD_ATE_ID        = pATD_ATE_ID;   
   UPDATE TB_ATD_GUI_GUIAATEND GUI         SET GUI.CAD_PAC_ID_PACIENTE     = pPACIENTE_CORRETO WHERE GUI.CAD_PAC_ID_PACIENTE     = pPACIENTE_ERRADO AND GUI.ATD_ATE_ID        = pATD_ATE_ID;   
   UPDATE TB_ATD_IAE_INT_AGE_ELETIVA IAE   SET IAE.CAD_PAC_ID_PACIENTE     = pPACIENTE_CORRETO WHERE IAE.CAD_PAC_ID_PACIENTE     = pPACIENTE_ERRADO AND IAE.ATD_IAE_ID        = pATD_ATE_ID;
   UPDATE TB_ATD_IML_INT_MOV_LEITO IML     SET IML.CAD_PAC_ID_PACIENTE     = pPACIENTE_CORRETO WHERE IML.CAD_PAC_ID_PACIENTE     = pPACIENTE_ERRADO AND IML.ATD_ATE_ID        = pATD_ATE_ID;   
   UPDATE TB_ATS_ATE_ATENDIMENTO_SADT ATS  SET ATS.CAD_PAC_ID_PACIENTE_INT = pPACIENTE_CORRETO WHERE ATS.CAD_PAC_ID_PACIENTE_INT = pPACIENTE_ERRADO AND ATS.ATS_ATE_CD_INTLIB = pATD_ATE_ID;
   /*COBRAN√áA */
   OPEN curCOB_CCP_CONTA_CONS_PARC;
   LOOP
      FETCH curCOB_CCP_CONTA_CONS_PARC INTO linhaCOB_CCP_CONTA_CONS_PARC;
      EXIT WHEN curCOB_CCP_CONTA_CONS_PARC%NOTFOUND;
      linhaCOB_CCP_CONTA_CONS_PARC.CAD_PAC_ID_PACIENTE := pPACIENTE_CORRETO;
      INSERT INTO TB_COB_CCP_CONTA_CONS_PARC VALUES linhaCOB_CCP_CONTA_CONS_PARC;   
   END LOOP;
   CLOSE curCOB_CCP_CONTA_CONS_PARC;   
   UPDATE TB_COB_MGC_MOV_GUIA_COBRANCA MGC SET MGC.CAD_PAC_ID_PACIENTE = pPACIENTE_CORRETO WHERE MGC.CAD_PAC_ID_PACIENTE = pPACIENTE_ERRADO AND MGC.ATD_ATE_ID = pATD_ATE_ID;
   DELETE TB_COB_CCP_CONTA_CONS_PARC WHERE CAD_PAC_ID_PACIENTE = pPACIENTE_ERRADO AND ATD_ATE_ID  = pATD_ATE_ID;
   OPEN curTB_COB_CCP_CONTA_HISTORICO;
   LOOP
      FETCH curTB_COB_CCP_CONTA_HISTORICO INTO linhaCOB_CCP_CONTA_HISTORICO;
      EXIT WHEN curTB_COB_CCP_CONTA_HISTORICO%NOTFOUND;
      linhaCOB_CCP_CONTA_HISTORICO.CAD_PAC_ID_PACIENTE := pPACIENTE_CORRETO;
      INSERT INTO TB_COB_CCP_CONTA_HISTORICO VALUES linhaCOB_CCP_CONTA_HISTORICO;   
   END LOOP;
   CLOSE curTB_COB_CCP_CONTA_HISTORICO;   
   UPDATE TB_COB_MGC_COBRANCA_HISTORICO MGC SET MGC.CAD_PAC_ID_PACIENTE = pPACIENTE_CORRETO WHERE MGC.CAD_PAC_ID_PACIENTE = pPACIENTE_ERRADO AND MGC.ATD_ATE_ID = pATD_ATE_ID;
   DELETE TB_COB_CCP_CONTA_HISTORICO WHERE CAD_PAC_ID_PACIENTE = pPACIENTE_ERRADO AND ATD_ATE_ID  = pATD_ATE_ID;
   /*FIM COBRAN√áA*/
   UPDATE TB_FAT_AFR_ATEND_FATUR_RES AFR SET AFR.CAD_PAC_ID_PACIENTE = pPACIENTE_CORRETO WHERE AFR.CAD_PAC_ID_PACIENTE = pPACIENTE_ERRADO AND AFR.ATD_ATE_ID = pATD_ATE_ID;
   OPEN cursorFAT_COC_CONTA_CONSUMO;
   LOOP
      FETCH cursorFAT_COC_CONTA_CONSUMO INTO lInhaFAT_COC_CONTA_CONSUMO;
      EXIT WHEN cursorFAT_COC_CONTA_CONSUMO%NOTFOUND;
      linhaFAT_COC_CONTA_CONSUMO.CAD_PAC_ID_PACIENTE := pPACIENTE_CORRETO;
      INSERT INTO TB_FAT_COC_CONTA_CONSUMO VALUES linhaFAT_COC_CONTA_CONSUMO;   
   END LOOP;
   CLOSE cursorFAT_COC_CONTA_CONSUMO;
   OPEN cursorFAT_CCP_CONTA_CONS_PARC;
   LOOP
      FETCH cursorFAT_CCP_CONTA_CONS_PARC INTO linhaFAT_CCP_CONTA_CONS_PARC;
      EXIT WHEN cursorFAT_CCP_CONTA_CONS_PARC%NOTFOUND;
      linhaFAT_CCP_CONTA_CONS_PARC.CAD_PAC_ID_PACIENTE := pPACIENTE_CORRETO;
      INSERT INTO TB_FAT_CCP_CONTA_CONS_PARC VALUES linhaFAT_CCP_CONTA_CONS_PARC;
   END LOOP;
   CLOSE cursorFAT_CCP_CONTA_CONS_PARC;   
   UPDATE TB_FAT_CCI_CONTA_CONSU_ITEM CCI SET  CCI.CAD_PAC_ID_PACIENTE = pPACIENTE_CORRETO WHERE CCI.CAD_PAC_ID_PACIENTE = pPACIENTE_ERRADO AND CCI.ATD_ATE_ID = pATD_ATE_ID;
   UPDATE TB_REP_PGM_PAGTO_MEDICO PGM     SET  PGM.CAD_PAC_ID_PACIENTE = pPACIENTE_CORRETO WHERE PGM.CAD_PAC_ID_PACIENTE = pPACIENTE_ERRADO AND PGM.ATD_ATE_ID = pATD_ATE_ID;
   DELETE TB_FAT_CCP_CONTA_CONS_PARC CCP WHERE CCP.CAD_PAC_ID_PACIENTE = pPACIENTE_ERRADO AND CCP.ATD_ATE_ID = pATD_ATE_ID;
   DELETE TB_FAT_COC_CONTA_CONSUMO COC   WHERE COC.CAD_PAC_ID_PACIENTE = pPACIENTE_ERRADO AND COC.ATD_ATE_ID = pATD_ATE_ID;
   UPDATE TB_FAT_FCL_CONTR_EMI_LOTE FCL               SET FCL.CAD_PAC_ID_PACIENTE   = pPACIENTE_CORRETO WHERE FCL.CAD_PAC_ID_PACIENTE   = pPACIENTE_ERRADO AND FCL.ATD_ATE_ID              = pATD_ATE_ID;
   UPDATE TB_IEL_INTERF_EXAMES_LAB IEL                SET IEL.CAD_PAC_ID_PACIENTE   = pPACIENTE_CORRETO WHERE IEL.CAD_PAC_ID_PACIENTE   = pPACIENTE_ERRADO AND IEL.ATD_ATE_ID              = pATD_ATE_ID;  
   UPDATE TB_TMP_CPR_CONTA_PARC_REL CPR               SET CPR.CAD_PAC_ID_PACIENTE   = pPACIENTE_CORRETO WHERE CPR.CAD_PAC_ID_PACIENTE   = pPACIENTE_ERRADO AND CPR.ATD_ATE_ID              = pATD_ATE_ID;
   UPDATE TSS_SOLIC_INT_OPM_SGS OPM                   SET OPM.IDT_PACIENTE          = pPACIENTE_CORRETO WHERE OPM.IDT_PACIENTE          = pPACIENTE_ERRADO AND OPM.NR_ATENDIMENTO          = pATD_ATE_ID;
   UPDATE TSS_SOLIC_INT_PROC_SGS PROC                 SET PROC.IDT_PACIENTE         = pPACIENTE_CORRETO WHERE PROC.IDT_PACIENTE         = pPACIENTE_ERRADO AND PROC.NR_ATENDIMENTO         = pATD_ATE_ID;
   UPDATE TSS_SOLIC_INT_PRORROG_PROC_SGS PRORROG_PROC SET PRORROG_PROC.IDT_PACIENTE = pPACIENTE_CORRETO WHERE PRORROG_PROC.IDT_PACIENTE = pPACIENTE_ERRADO AND PRORROG_PROC.NR_ATENDIMENTO = pATD_ATE_ID;
   UPDATE TSS_SOLIC_INT_PRORROG_SGS PRORROG           SET PRORROG.IDT_PACIENTE      = pPACIENTE_CORRETO WHERE PRORROG.IDT_PACIENTE      = pPACIENTE_ERRADO AND PRORROG.NR_ATENDIMENTO      = pATD_ATE_ID;
   UPDATE TSS_SOLIC_INT_SGS INT_SGS                   SET INT_SGS.IDT_PACIENTE      = pPACIENTE_CORRETO WHERE INT_SGS.IDT_PACIENTE      = pPACIENTE_ERRADO AND INT_SGS.NR_ATENDIMENTO      = pATD_ATE_ID;
   UPDATE TSS_SOLIC_PRORROG_OPM_SGS PRORROG_OPM       SET PRORROG_OPM.IDT_PACIENTE  = pPACIENTE_CORRETO WHERE PRORROG_OPM.IDT_PACIENTE  = pPACIENTE_ERRADO AND PRORROG_OPM.NR_ATENDIMENTO  = pATD_ATE_ID;
   UPDATE TSS_SPSADT_OPM_SOL_SGS OPM_SOL              SET OPM_SOL.IDT_PACIENTE      = pPACIENTE_CORRETO WHERE OPM_SOL.IDT_PACIENTE      = pPACIENTE_ERRADO AND OPM_SOL.NR_ATENDIMENTO      = pATD_ATE_ID;
   UPDATE TSS_SPSADT_OPM_UTIL_SGS OPM_UTIL            SET OPM_UTIL.IDT_PACIENTE     = pPACIENTE_CORRETO WHERE OPM_UTIL.IDT_PACIENTE     = pPACIENTE_ERRADO AND OPM_UTIL.NR_ATENDIMENTO     = pATD_ATE_ID;
   UPDATE TSS_SPSADT_PROC_EQUIPE_SGS PROC_EQUIPE      SET PROC_EQUIPE.IDT_PACIENTE  = pPACIENTE_CORRETO WHERE PROC_EQUIPE.IDT_PACIENTE  = pPACIENTE_ERRADO AND PROC_EQUIPE.NR_ATENDIMENTO  = pATD_ATE_ID;
   OPEN curTSS_SPSADT_SGS;
   LOOP
      FETCH curTSS_SPSADT_SGS INTO linhaTSS_SPSADT_SGS;
      EXIT WHEN curTSS_SPSADT_SGS%NOTFOUND;
      linhaTSS_SPSADT_SGS.IDT_PACIENTE := pPACIENTE_CORRETO;
      INSERT INTO TSS_SPSADT_SGS VALUES linhaTSS_SPSADT_SGS;   
   END LOOP;
   CLOSE curTSS_SPSADT_SGS;
   UPDATE TSS_SPSADT_PROC_REAL_SGS PROC_REAL SET PROC_REAL.IDT_PACIENTE = pPACIENTE_CORRETO WHERE PROC_REAL.IDT_PACIENTE = pPACIENTE_ERRADO AND PROC_REAL.NR_ATENDIMENTO = pATD_ATE_ID;
   UPDATE TSS_SPSADT_PROC_SOL_SGS PROC_SOL   SET PROC_SOL.IDT_PACIENTE = pPACIENTE_CORRETO  WHERE PROC_SOL.IDT_PACIENTE  = pPACIENTE_ERRADO AND PROC_SOL.NR_ATENDIMENTO  = pATD_ATE_ID;
   DELETE TSS_SPSADT_SGS SPSADT WHERE SPSADT.IDT_PACIENTE = pPACIENTE_ERRADO AND SPSADT.NR_ATENDIMENTO = pATD_ATE_ID;
   EXCEPTION
      WHEN OTHERS THEN
         ROLLBACK;
         RAISE_APPLICATION_ERROR(-20001,' PROBLEMA CORRIGINDO HISTORICO POR ATENDIMENTO ! '||' PACIENTE CORRETO '||TO_CHAR(pPACIENTE_CORRETO)||
                                        ' PACIENTE ERRADO '||TO_CHAR(pPACIENTE_ERRADO)|| 
                                        ' ATENDIMENTO '||TO_CHAR(pATD_ATE_ID)||SQLERRM);
END CORRIGE_HIST_POR_ATENDIMENTO;
--====================================================================================================
PROCEDURE EXCLUI_PESSOA(pPESSOA IN NUMBER) IS
BEGIN
  BEGIN
    DELETE TB_ASS_PTE_PESSOA_TELEFONE    WHERE CAD_PES_ID_PESSOA = pPESSOA;
    DELETE TB_ASS_PEM_PESSOA_EMAIL       WHERE CAD_PES_ID_PESSOA = pPESSOA;
    DELETE TB_ASS_PEE_PESSOA_ENDERECO    WHERE CAD_PES_ID_PESSOA = pPESSOA;
    DELETE TB_ASS_ARE_ATD_RESPONSAVEL    WHERE CAD_PES_ID_PESSOA = pPESSOA;
    DELETE TB_ASS_PPT_PESSOA_PRONTUARIO  WHERE CAD_PES_ID_PESSOA = pPESSOA;
    DELETE TB_CAD_ACS_BENEF              WHERE CAD_PES_ID_PESSOA = pPESSOA;
    DELETE TB_CAD_TEL_TELEFONE           WHERE CAD_PES_ID_PESSOA = pPESSOA;
    DELETE TB_CAD_END_ENDERECO           WHERE CAD_PES_ID_PESSOA = pPESSOA;
    DELETE TB_ASS_PMD_PESSOA_MD5         WHERE CAD_PES_ID_PESSOA = pPESSOA;
    DELETE TB_CAD_PES_PESSOA             WHERE CAD_PES_ID_PESSOA = pPESSOA;
  EXCEPTION
        WHEN OTHERS THEN
           ROLLBACK;
           RAISE_APPLICATION_ERROR(-20001,SQLERRM);
  END;
END EXCLUI_PESSOA;
-- ========================================================================================================
BEGIN
   BEGIN
      -- busca todas as possibilidades existentes
      V_ID := 0;
      IF ( PTIPO_CORRECAO = 1 ) THEN
         BEGIN
            SELECT ASS_PMD_NM_PESSOA,  ASS_PMD_DT_NASCIMENTO,  ASS_PMD_TP_SEXO
            INTO   pASS_PMD_NM_PESSOA, pASS_PMD_DT_NASCIMENTO, pASS_PMD_TP_SEXO
            FROM TB_ASS_PMD_PESSOA_MD5 MD5
            WHERE CAD_PES_ID_PESSOA =  pCAD_PES_ID_PESSOA_CERTA
            AND   MD5.ASS_PMD_DT_DESATIVACAO IS NULL;
         EXCEPTION
            WHEN TOO_MANY_ROWS THEN
               RAISE_APPLICATION_ERROR(-20001,'EXISTE MAIS QUE UMA LINHA NA TABELA DE MD5 PARA O ID: '||TO_CHAR(pCAD_PES_ID_PESSOA_CERTA));         
            WHEN OTHERS THEN
               RAISE_APPLICATION_ERROR(-20001,' ERRO PESQUISANDO HISTORICO INICIAL, NA PESQUISA DO MD5 NAO FOI ENCONTRADA NENHUM HISTORICO COM DATA DA DESATIVACAO NULA, ID:'||TO_CHAR(pCAD_PES_ID_PESSOA_CERTA)||' '||SQLERRM);
         END;
         pMD5 := GERA_MD5(pASS_PMD_NM_PESSOA, pASS_PMD_DT_NASCIMENTO, pASS_PMD_TP_SEXO);   
         FOR cHIST IN (
            SELECT  CAD_PES_ID_PESSOA,
                    CAD_PES_NM_PESSOA,      LENGTH(CAD_PES_NM_PESSOA) TAMA, 
                    CAD_PES_DT_NASCIMENTO,  CAD_PES_TP_SEXO,  
                    CAD_PES_NM_NOMEMAE,
                    LPAD(TO_CHAR(PES.CAD_PES_NR_CNPJ_CPF),11,'0') CAD_PES_NR_CNPJ_CPF,    CAD_PES_FL_JURIDICA_OK, 
                    CAD_PES_NR_RG, 
                    CAD_PES_NM_RAZAOSOCIAL      CAD_PES_CD_INSCR_ESTAD, CAD_PES_CD_INSCR_MUNIC, 
                    CAD_PES_CD_ESTADOCIVIL,  
                    CAD_PES_CD_ORGAOEMISSORRG,  CAD_PES_DT_EXPEDICAORG, CAD_PES_TP_SANGUINEO, 
                    CAD_PES_FL_SANGPOSITIVO_OK, CAD_PES_NM_NOMEPAI,     CAD_PES_NM_CONJUGE,
                    AUX_UFE_SG_UF 
            FROM TB_CAD_PES_PESSOA PES 
            WHERE PES.CAD_PES_NM_PESSOA     = pASS_PMD_NM_PESSOA
            AND   PES.CAD_PES_DT_NASCIMENTO = pASS_PMD_DT_NASCIMENTO -- TO_DATE('29111964','DDMMYYYY')
            AND   PES.CAD_PES_TP_SEXO       = pASS_PMD_TP_SEXO
            UNION
            SELECT  CAD_PES_ID_PESSOA,
                    CAD_PES_NM_PESSOA,      LENGTH(CAD_PES_NM_PESSOA) TAMA, 
                    CAD_PES_DT_NASCIMENTO,  CAD_PES_TP_SEXO,  
                    CAD_PES_NM_NOMEMAE,
                    LPAD(TO_CHAR(PES.CAD_PES_NR_CNPJ_CPF),11,'0') CAD_PES_NR_CNPJ_CPF,    CAD_PES_FL_JURIDICA_OK, 
                    CAD_PES_NR_RG, 
                    CAD_PES_NM_RAZAOSOCIAL      CAD_PES_CD_INSCR_ESTAD, CAD_PES_CD_INSCR_MUNIC, 
                    CAD_PES_CD_ESTADOCIVIL,  
                    CAD_PES_CD_ORGAOEMISSORRG,  CAD_PES_DT_EXPEDICAORG, CAD_PES_TP_SANGUINEO, 
                    CAD_PES_FL_SANGPOSITIVO_OK, CAD_PES_NM_NOMEPAI,     CAD_PES_NM_CONJUGE,
                    AUX_UFE_SG_UF 
            FROM TB_CAD_PES_PESSOA PES 
            WHERE SOUNDEX(PES.CAD_PES_NM_PESSOA)     = SOUNDEX(pASS_PMD_NM_PESSOA)
            AND   PES.CAD_PES_DT_NASCIMENTO          = pASS_PMD_DT_NASCIMENTO -- TO_DATE('29111964','DDMMYYYY')
            AND   PES.CAD_PES_TP_SEXO                = pASS_PMD_TP_SEXO
            UNION 
            SELECT  CAD_PES_ID_PESSOA,
                    CAD_PES_NM_PESSOA,      LENGTH(CAD_PES_NM_PESSOA) TAMA, 
                    CAD_PES_DT_NASCIMENTO,  CAD_PES_TP_SEXO,  
                    CAD_PES_NM_NOMEMAE,
                    LPAD(TO_CHAR(PES.CAD_PES_NR_CNPJ_CPF),11,'0') CAD_PES_NR_CNPJ_CPF,    CAD_PES_FL_JURIDICA_OK, 
                    CAD_PES_NR_RG, 
                    CAD_PES_NM_RAZAOSOCIAL      CAD_PES_CD_INSCR_ESTAD, CAD_PES_CD_INSCR_MUNIC, 
                    CAD_PES_CD_ESTADOCIVIL,  
                    CAD_PES_CD_ORGAOEMISSORRG,  CAD_PES_DT_EXPEDICAORG, CAD_PES_TP_SANGUINEO, 
                    CAD_PES_FL_SANGPOSITIVO_OK, CAD_PES_NM_NOMEPAI,     CAD_PES_NM_CONJUGE,
                    AUX_UFE_SG_UF 
            FROM TB_CAD_PES_PESSOA PES 
            WHERE REPLACE(PES.CAD_PES_NM_PESSOA, ' ','') = REPLACE(pASS_PMD_NM_PESSOA,' ','')
            AND   PES.CAD_PES_DT_NASCIMENTO              = pASS_PMD_DT_NASCIMENTO -- TO_DATE('29111964','DDMMYYYY')
            AND   PES.CAD_PES_TP_SEXO                    = pASS_PMD_TP_SEXO
         )
         LOOP
            IF ( cHIST.Cad_Pes_Id_Pessoa != pCAD_PES_ID_PESSOA_CERTA ) THEN
              -- CORRIGE PACIENTE
              CORRIGE_PACIENTE(pCAD_PES_ID_PESSOA_CERTA, cHIST.Cad_Pes_Id_Pessoa);
              EXCLUI_PESSOA(cHIST.Cad_Pes_Id_Pessoa);
              LOG_CORRECAO(V_ID, -- ID
                           pCAD_PES_ID_PESSOA_CERTA,
                           cHIST.Cad_Pes_Id_Pessoa, -- PESSOA ERRADA
                           NULL,    -- ppATD_ATE_ID
                           NULL,    -- ppCAD_PAC_ID_PACIENTE_CERTO  
                           NULL,    -- ppCAD_PAC_ID_PACIENTE_ERRADO
                           'INICIO', -- ROTINA
                           NULL,  -- PRONTUARIO
                           PTIPO_CORRECAO,       -- ppTIPO_CORRECAO                           
                           pSEG_USU_ID_USUARIO
                           ); 
            END IF;
         END LOOP;
      ELSIF ( PTIPO_CORRECAO = 2 ) THEN
        CORRIGE_PACIENTE(pCAD_PES_ID_PESSOA_CERTA, pCAD_PES_ID_PESSOA_ERRADA);
        EXCLUI_PESSOA(pCAD_PES_ID_PESSOA_ERRADA);
        LOG_CORRECAO(V_ID, -- ID
                     pCAD_PES_ID_PESSOA_CERTA, -- pCAD_PES_ID_PESSOA_CERTA,
                     pCAD_PES_ID_PESSOA_ERRADA, -- PESSOA ERRADA
                     NULL,    -- ppATD_ATE_ID
                     NULL,    -- ppCAD_PAC_ID_PACIENTE_CERTO  
                     NULL,    -- ppCAD_PAC_ID_PACIENTE_ERRADO
                     'INICIO', -- ROTINA 
                     NULL, -- PRONTUARIO                    
                     PTIPO_CORRECAO,       -- ppTIPO_CORRECAO
                     pSEG_USU_ID_USUARIO
                     );            
      ELSIF  ( PTIPO_CORRECAO = 3 ) THEN
        CORRIGE_HIST_POR_ATENDIMENTO(pCAD_PAC_ID_PACIENTE_CERTO, pCAD_PAC_ID_PACIENTE_ERRADO, pATD_ATE_ID);
        LOG_CORRECAO(V_ID, -- ID
                     NULL, -- pCAD_PES_ID_PESSOA_CERTA,
                     NULL, -- PESSOA ERRADA
                     pATD_ATE_ID,    -- ppATD_ATE_ID
                     pCAD_PAC_ID_PACIENTE_CERTO,    -- ppCAD_PAC_ID_PACIENTE_CERTO  
                     pCAD_PAC_ID_PACIENTE_ERRADO,    -- ppCAD_PAC_ID_PACIENTE_ERRADO
                     'INICIO', -- ROTINA
                     NULL, -- PRONTUARIO
                     PTIPO_CORRECAO,       -- ppTIPO_CORRECAO                     
                     pSEG_USU_ID_USUARIO
                     );
      ELSIF ( PTIPO_CORRECAO = 4 ) THEN
            CORRIGE_HISTORICO(pCAD_PAC_ID_PACIENTE_CERTO, pCAD_PAC_ID_PACIENTE_ERRADO);
        LOG_CORRECAO(V_ID, -- ID
                     NULL, -- pCAD_PES_ID_PESSOA_CERTA,
                     NULL, -- PESSOA ERRADA
                     pATD_ATE_ID,    -- ppATD_ATE_ID
                     pCAD_PAC_ID_PACIENTE_CERTO,    -- ppCAD_PAC_ID_PACIENTE_CERTO  
                     pCAD_PAC_ID_PACIENTE_ERRADO,    -- ppCAD_PAC_ID_PACIENTE_ERRADO
                     'INICIO', -- ROTINA
                     NULL, -- PRONTUARIO
                     PTIPO_CORRECAO,       -- ppTIPO_CORRECAO                     
                     pSEG_USU_ID_USUARIO
                     );            
      ELSE
          RAISE_APPLICATION_ERROR(-20001,'N√ÉO FOI PASSADO O TIPO DE CORRE√á√ÉO A SER REALIZADA !');
      END IF; -- TIPO CORRECAO
      COMMIT;
   EXCEPTION 
      WHEN OTHERS THEN
         RAISE_APPLICATION_ERROR(-20001,' ERRO PROCESSANDO CORRE√á√ÉO DE PACIENTE '||SQLERRM);
   END;        
END PRC_PEP_CORRIGE_PES_PAC;