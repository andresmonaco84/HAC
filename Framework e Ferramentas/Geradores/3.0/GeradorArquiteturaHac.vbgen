##|TYPE Template
##|UNIQUEID 58b6a43c-aab3-4ed4-8812-6e1adfe96fc4
##|TITLE GeradorArquiteturaHac
##|NAMESPACE 
##|SOURCE_TYPE Source
##|OUTPUT_LANGUAGE None
##|GUI_ENGINE Microsoft Script
##|GUI_LANGUAGE VBScript
##|GUI_BEGIN
Dim cmbDatabases
Dim lstTables
Dim chk

Sub setup()

	If Not input.Contains("lstTables") Or Not input.Contains("txtPath") Then

		ui.Title = "Gerador Arquitetura Hac"
		ui.Width  = 320
		ui.Height = 720

		' Grab default output path
		Dim sOutputPath
		sOutputPath = ""
		If input.Contains("defaultOutputPath") Then 
			sOutputPath = "C:\Geracao"
		End If

		ui.AddLabel "lblPath", "Caminho de saída: ",  "Selecione o caminho de saída."
		ui.AddTextBox "txtPath", sOutputPath, "Selecione o caminho de saída."
		ui.AddFilePicker "btnPath", "Seleciona o Caminho", "Seleciona o caminho de saída.", "txtPath", true

		ui.AddLabel "lblNamespace", "Namespace: ",  "Namespace"
		ui.AddTextBox "txtNamespace", "HospitalAnaCosta.Services.CadastroFaturamento", "Informe o Namespace."			

		ui.AddLabel "lblSufixoProc", "Sufixo Procedure: ",  "Sufixo"
		ui.AddTextBox "txtSufixoProc", "", "Sufixo Procedure."	

		'ui.AddLabel "lblPrefixo", "Prefixo da procedure: ",  "Informe o prefixo da procedure (não obrigatório)."
		'ui.AddTextBox "txtPrefixo", "PRC_" , ""				

		'ui.AddLabel "lblPrefixoParametro", "Prefixo do Parâmetro: ",  "Caracter identificador do parâmetro do banco."
		'ui.AddTextBox "txtPrefixoParametro", "p", ""			

		' List Databases in a ComboBox
		ui.AddLabel "lblDatabases", "Selecione o Database:", "Selecione o Database abaixo."
		Set cmbDatabases = ui.AddComboBox("cmbDatabase", "Selecione o Database.")

		' List Tables in a listbox
		ui.AddLabel "lblTables", "Selecione as tabelas:", "Selecione as tabelas abaixo."
		Set lstTables = ui.AddListBox ("lstTables", "Selecione as tabelas:")
		'lstTables.IsMultiSelect = false
		lstTables.Height = 370

		'Indica se campo inteiro como chave primaria deve utilizar select max na procedure para identity
		'Set utilizaAutoIncremento = ui.AddCheckBox("ckUtilizaAutoIncremento", "Utiliza AutoIncremento para campo Inteiro?", false, "Se chave do tipo inteiro, deseja utilizar autoincremento caso campo não seja Identity?")
		'Set databaseDefault = ui.AddCheckBox("ckDataBaseDefault", "Database default?", true, "Se não for default, o construtor do método DataBaseFactory.CreateDatabase informará a instância correspondente")
		
		' Attach the onchange event to the cmbDatabases control.
		setupDatabaseDropdown cmbDatabases

		'Posiciona a combo de database e seleciona as tables
		cmbDatabases.SelectedValue = "SGS"
		cmbDatabases_onchange(cmbDatabases)
		
		ui.ShowGUI = true
	Else 
		ui.ShowGUI = false
	End if

End Sub

Sub setupDatabaseDropdown(cmbDatabases)
	cmbDatabases.BindData MyMeta.Databases
	
	If Not MyMeta.DefaultDatabase Is Nothing Then
		cmbDatabases.SelectedValue = MyMeta.DefaultDatabase.Name
		bindTables cmbDatabases.SelectedValue
	End If
	
	cmbDatabases.AttachEvent "onchange", "cmbDatabases_onchange"
End Sub

Sub bindTables(sDatabase)
	Set db = MyMeta.Databases(sDatabase)
	lstTables.BindData(db.Tables)
End Sub

' Event Handler
Sub cmbDatabases_onchange(control)
	Set cmbDatabases = ui.item("cmbDatabase")
	bindTables cmbDatabases.SelectedText
End Sub
##|GUI_END
##|BODY_MODE Markup
##|BODY_ENGINE Microsoft Script
##|BODY_LANGUAGE VBScript
##|BODY_TAG_START <%
##|BODY_TAG_END %>
##|BODY_BEGIN
<%
'------------------------------------------
' Procedures
' Data de Criação : 18/03/2008
' Data de Alteração : 04/12/2009
'------------------------------------------
' Este Template gera 4 stored procedures
' 1) [Prefixo][TableName]_L - Listar
' 2) [Prefixo][TableName]_U - Update
' 3) [Prefixo][TableName]_I - Insert
' 4) [Prefixo][TableName]_D - Delete
' 5) [Prefixo][TableName]_S - Selecionar
'------------------------------------------
' Model
' Data de Criação : 18/03/2008
' OBSERVAÇÕES IMPORTANTES:
' Configurar: Default settings
' -Alterar DbTarget para DbType
' -Alterar Language para C#
' Última Alteração: 04/12/2009
'------------------------------------------
' Interface
' Data de Criação : 18/03/2008
' Última Alteração: 04/12/2009
'------------------------------------------
' DTO
' Data de Criação : 17/03/2008
' OBSERVAÇÕES IMPORTANTES:
' Configurar: Default settings
' -Alterar DbTarget para DBType
' -Alterar Language para C#
' Última Alteração: 04/12/2009
'------------------------------------------
' Control
' Data de Criação : 18/03/2008
' Última Alteração: 04/12/2009
'------------------------------------------

'Define as variaveis de namespace
namespace = TrimSpaces(input.Item("txtNamespace"))
namespaceDTO = TrimSpaces(input.Item("txtNamespace")) + ".DTO"
namespaceInterface = TrimSpaces(input.Item("txtNamespace")) + ".Interface"
namespaceControl = TrimSpaces(input.Item("txtNamespace")) + ".Control"
namespaceModel = TrimSpaces(input.Item("txtNamespace")) + ".Model"

'Caminho geração de arquivos
strCaminhoSQL = input.Item("txtPath") + "/SQL/"
strCaminhoModel = input.Item("txtPath") + "/Model/"
strCaminhoInterface = input.Item("txtPath") + "/Interface/"
strCaminhoControl = input.Item("txtPath") + "/Control/"
strCaminhoDTO = input.Item("txtPath") + "/DTO/"

prefixoProcedure = "PRC_" 'ucase(input.Item("txtPrefixo"))

If input.Item("txtSufixoProc") = "" Then
	sufixoProcedure = ""
Else
	sufixoProcedure = "_" + ucase(input.Item("txtSufixoProc")) 
End If

'prefixoParametro = "p" 'input.Item("txtPrefixoParametro")
'chkDatabaseDefault = input.Item("ckDataBaseDefault")
'chkUtilizaAutoIncrementoCampoInteiro = input.Item("ckUtilizaAutoIncremento")


' Pega o nome da Base de Dados
database = input.Item("cmbDatabase")
Set objDataBase = MyMeta.Databases(database)

' Pega a lista de tabelas selecionadas pelo usurio
Set lstTabela = input.Item("lstTables")

'--------------------------------------------

If lstTabela.Count > 0 THEN
	For Each objTabelaCombo in lstTabela		
		Set objTabela = objDataBase.Tables(objTabelaCombo)	
		If (Len(objTabela.Name) > 27) Then
			output.writeln(objTabela.Name & ": Tamanho da tabela maior que o permitido de 27 caractestes. Tamanho atual: " & Len(objTabela.Name))
		Else		
			If objTabela.PrimaryKeys.Count = 0 Then
				output.writeln(objTabela.Name & ": Não existe chave primária definida para esta tabela.")
			Else
				Set props = objTabela.Properties
'**************
'* Procedures *
'**************
	%> 
--<%= MontaNomeProcedure(objTabela.Name, "_L")%>
create or replace procedure <%= MontaNomeProcedure(objTabela.Name, "_L")%> 
(
<%
' list all keys as parameters
bInFirst = True
For Each objColuna in objTabela.Columns

	If Not bInFirst Then 
		output.write  "," & vbCrLf
	End if	

	bInFirst = false
	output.write "     p" & GetParameterName(objColuna) & " IN " & objTabela.Name & "." & objColuna.Name & "%type DEFAULT NULL"
Next	

If Not bInFirst Then 
	output.write  "," & vbCrLf
End if		
output.write "     io_cursor OUT PKG_CURSOR.t_cursor" 
%>
) 
is
/********************************************************************
*    Procedure: <%= MontaNomeProcedure(objTabela.Name, "_L")%>
* 
*    Data Criacao: 	data da  criação   Por: Nome do Analista
*    Data Alteracao:	data da alteração  Por: Nome do Analista
*
*    Funcao: Descrição da funcionalidade da Stored Procedure
*
*******************************************************************/
 v_cursor PKG_CURSOR.t_cursor;
  V_WHERE  varchar2(5000);
  V_SELECT  varchar2(5000);
begin
  V_WHERE := NULL;
  <%	' Lista todos os campos
bInFirst = true
For Each objColuna in objTabela.Columns

	If Not bInFirst Then 
		output.write  "" & vbCrLf
	End if	

	bInFirst = false			

	output.write "IF p" & objColuna.Name & " IS NOT NULL THEN"
	output.write " V_WHERE:= V_WHERE || ' AND " & objColuna.Name  
	SELECT CASE lcase(objColuna.LanguageType)
		CASE "short", "int", "long", "decimal", "double", "integer"
			output.write " = ' || p" &  objColuna.Name & "; END IF;"
		CASE "string", "varchar", "varchar2", "VARCHAR2","datetime"
			output.write " = ' || CHR(39) || p" &  objColuna.Name & " || CHR(39); END IF;"
	END SELECT
	
	
Next
%>
 
   V_SELECT := '
SELECT	
<%	' Lista todos os campos
bInFirst = true
For Each objColuna in objTabela.Columns

	If Not bInFirst Then 
		output.write  "," & vbCrLf
	End if	

	bInFirst = false			

	output.write "       " & objColuna.Name
Next
%>
FROM <%output.write objTabela.Name %>
WHERE null is null  '    ;
       
OPEN v_cursor FOR
  V_SELECT || V_WHERE ;
  io_cursor := v_cursor;
end <%= MontaNomeProcedure(objTabela.Name, "_L")%>;
<%	
'**************************************************
'Grava 1 procedure por arquivo
'**************************************************
filename = strCaminhoSQL

intTamanho = Len(filename)
intPosicaoBarra = InStrRev(filename, "\") 

If Not intPosicaoBarra = intTamanho Then
	filename = filename & "\"
End If

filename = filename & MontaNomeProcedure(objTabela.Name, "_L") & ".SQL"

output.save filename, false
strBuffer = strBuffer & output.text
output.clear
%>

--<%= MontaNomeProcedure(objTabela.Name, "_S")%>
create or replace procedure <%= MontaNomeProcedure(objTabela.Name, "_S")%> 
(
<%
' list all keys as parameters
bInFirst = true
For Each objColuna in objTabela.PrimaryKeys

	' check if at end of keys
	If Not bInFirst Then
		output.write "," & vbCrLf
	End If

	bInFirst = false

	output.write "     p" & GetParameterName(objColuna) & " IN " & objTabela.Name & "." & objColuna.Name & "%type"
Next
output.write "," & vbCrLf
output.write "     io_cursor OUT PKG_CURSOR.t_cursor" 
%>
) 
is
/********************************************************************
*    Procedure: <%= MontaNomeProcedure(objTabela.Name, "_S")%>
* 
*    Data Criacao: 	data da  criação   Por: Nome do Analista
*    Data Alteracao:	data da alteração  Por: Nome do Analista
*
*    Funcao: Descrição da funcionalidade da Stored Procedure
*
*******************************************************************/
v_cursor PKG_CURSOR.t_cursor;
begin
OPEN v_cursor FOR
SELECT	
<%	' Lista todos os campos
bInFirst = true
For Each objColuna in objTabela.Columns

	If Not bInFirst Then 
		output.write  "," & vbCrLf
	End if	

	bInFirst = false			

	output.write "       " & objColuna.Name
Next
%>
FROM <%output.write objTabela.Name %>
WHERE
<%
' Compare keys with parameters
blnFirst = True
For Each objColuna In objTabela.PrimaryKeys
	If Not blnFirst Then 
		output.write vbCrLf & "    AND " & objColuna.Name & " = p" & GetParameterName(objColuna)
	Else
		output.write "        " & objColuna.Name & " = p" & GetParameterName(objColuna) 
	End if
	blnFirst = False
Next
output.write  ";"
%>          
io_cursor := v_cursor;
end <%= MontaNomeProcedure(objTabela.Name, "_S")%>;
<%	
'**************************************************
'Grava 1 procedure por arquivo
'**************************************************

filename = strCaminhoSQL

intTamanho = Len(filename)
intPosicaoBarra = InStrRev(filename, "\") 

If Not intPosicaoBarra = intTamanho Then
	filename = filename & "\"
End If

filename = filename & MontaNomeProcedure(objTabela.Name, "_S") & ".SQL"

output.save filename, false
strBuffer = strBuffer & output.text
output.clear
%>

--<%= MontaNomeProcedure(objTabela.Name, "_I")%>
create or replace procedure <%= MontaNomeProcedure(objTabela.Name, "_I")%>
(
<%
blnPossuiSequence = false
strPropNameSequence = "SEQ:I:" + ucase(objTabela.name)
For Each objColuna in objTabela.Columns					
	If props.ContainsKey(strPropNameSequence) Then					
		output.write "     pNewIdt OUT integer," & vbCrLf
		blnPossuiSequence = true
		exit for
	End If
Next

' list all fields as parameters
bInFirst = true
For Each objColuna in objTabela.Columns
	If Not bInFirst Then 
		output.write "," & vbCrLf
	End If 

	bInFirst = false		
	dir = " IN "

	output.write "     p" & GetParameterName(objColuna) & dir & objTabela.Name & "." & objColuna.Name & "%type"
			
	if (objColuna.IsNullable) or (objColuna.IsInPrimaryKey and blnPossuiSequence) then
		output.write " default NULL"
	end if

Next
%>	
) 
is
/********************************************************************
*    Procedure: <%= MontaNomeProcedure(objTabela.Name, "_I")%>
* 
*    Data Criacao: 	data da  criação   Por: Nome do Analista
*    Data Alteracao:	data da alteração  Por: Nome do Analista
*
*    Funcao: Descrição da funcionalidade da Stored Procedure
*
*******************************************************************/  
<%  if (blnPossuiSequence) then
	output.write "    lIdtRetorno integer;" & vbCrLf
end if
%>	  
begin
<%
if (blnPossuiSequence) then
	For Each objColuna in objTabela.Columns					
		If props.ContainsKey(strPropNameSequence) Then					
			output.write "    SELECT " & props(strPropNameSequence).Value & ".NextVal INTO lIdtRetorno FROM DUAL;" & vbCrLf
			exit for
		End If
	Next
end if
%>	    
INSERT INTO <%output.write objTabela.Name %>
(
<%		' list all fields except identity (if one exists)
	bInFirst = true
	For Each objColuna in objTabela.Columns

		' check if field is not an indentity in which case we won't include it into insert list
		If Not objColuna.IsAutoKey And Not objColuna.IsComputed And Not objColuna.DataTypeName = "timestamp" Then 			
			If Not bInFirst Then 
				output.write  "," & vbCrLf
			End if	

			bInFirst = False

			output.write "       " & objColuna.Name
		End If
	Next
%>
)
VALUES
(
<%
	blnFirst = True

	' list all parameters except the one for indetity (if one exists)
	bInFirst = true
	For Each objColuna in objTabela.Columns

		if objColuna.IsInPrimaryKey and blnPossuiSequence then				
			output.write "      lIdtRetorno," & vbcrlf
		else
			If Not bInFirst Then 
				output.write  "," & vbCrLf
			End if	

			bInFirst = False				
			output.write "	     p" & GetParameterName(objColuna)			
		end if

	Next
%>
);
<%
if blnPossuiSequence then
	output.write "    pNewIdt := lIdtRetorno;"
end if
%>	
end <%= MontaNomeProcedure(objTabela.Name, "_I")%>;

<%	
'**************************************************
'Grava 1 procedure por arquivo
'**************************************************
filename = strCaminhoSQL
intTamanho = Len(filename)
intPosicaoBarra = InStrRev(filename, "\") 

If Not intPosicaoBarra = intTamanho Then
	filename = filename & "\"
End If

filename = filename & MontaNomeProcedure(objTabela.Name, "_I") & ".SQL"

output.save filename, false
strBuffer = strBuffer & output.text
output.clear
%>

--<%= MontaNomeProcedure(objTabela.Name, "_U")%>
create or replace procedure <%= MontaNomeProcedure(objTabela.Name, "_U")%>
(
<%
' list all fields as parameters
bInFirst = true
For Each objColuna in objTabela.Columns

	If Not bInFirst Then 
		output.write "," & vbCrLf
	End If 

	bInFirst = false		
	dir = " IN "

	output.write "     p" & GetParameterName(objColuna) & dir & objTabela.Name & "." & objColuna.Name & "%type"
	
	If (objColuna.IsNullable Or objColuna.IsComputed) And dir = " IN " Then
		output.write " default NULL"
	End If		

Next
%>
) 
is
/********************************************************************
*    Procedure: <%= MontaNomeProcedure(objTabela.Name, "_U")%>
* 
*    Data Criacao: 	data da  criação   Por: Nome do Analista
*    Data Alteracao:	data da alteração  Por: Nome do Analista
*
*    Funcao: Descrição da funcionalidade da Stored Procedure
*
*******************************************************************/  
begin
UPDATE <%output.write objTabela.Name %>
SET	   
<%
	' Lista todos os campos
	bInFirst = true
	For Each objColuna in objTabela.Columns
		
		If Not objColuna.IsInPrimaryKey And Not objColuna.IsAutoKey And Not objColuna.IsComputed Then
			If Not bInFirst Then 
				output.write  "," & vbCrLf
			End if	

			bInFirst = False				
			output.write "        " & objColuna.Name & " = p" & GetParameterName(objColuna)			
		End if
	Next
%> 
WHERE
<%
' Compara chaves com parametros
blnFirst = True
For Each objColuna In objTabela.PrimaryKeys
	If Not blnFirst Then 
		output.write vbCrLf & "    AND " & objColuna.Name & " = p" & GetParameterName(objColuna)
	Else
		output.write "        " & objColuna.Name & " = p" & GetParameterName(objColuna) 
	End if
	blnFirst = False
Next
%>;	
end <%= MontaNomeProcedure(objTabela.Name, "_U")%>;

<%	'**************************************************
'Grava 1 procedure por arquivo
'**************************************************
filename = strCaminhoSQL
intTamanho = Len(filename)
intPosicaoBarra = InStrRev(filename, "\") 

If Not intPosicaoBarra = intTamanho Then
	filename = filename & "\"
End If

filename = filename & MontaNomeProcedure(objTabela.Name, "_U") & ".SQL"

output.save filename, false
strBuffer = strBuffer & output.text
output.clear
%>

--<%= MontaNomeProcedure(objTabela.Name, "_D")%>
create or replace procedure <%= MontaNomeProcedure(objTabela.Name, "_D")%> 
(
<%
' list all keys as parameters
bInFirst = true
For Each objColuna in objTabela.PrimaryKeys

	' check if at end of keys
	If Not bInFirst Then
		output.write "," & vbCrLf
	End If

	bInFirst = false

	output.write "     p" & GetParameterName(objColuna) & " IN " & objTabela.Name & "." & objColuna.Name & "%type"
Next
%>	
)
is
/********************************************************************
*    Procedure: <%= MontaNomeProcedure(objTabela.Name, "_D")%>
* 
*    Data Criacao: 	data da  criação   Por: Nome do Analista
*    Data Alteracao:	data da alteração  Por: Nome do Analista
*
*    Funcao: Descrição da funcionalidade da Stored Procedure
*
*******************************************************************/    
begin
DELETE <%output.write objTabela.Name %>
WHERE  
<%
' Compare keys with parameters
blnFirst = True
For Each objColuna In objTabela.PrimaryKeys
	If Not blnFirst Then 
		output.write vbCrLf & "    AND " & objColuna.Name & " = p" & GetParameterName(objColuna)
	Else
		output.write "        " & objColuna.Name & " = p" & GetParameterName(objColuna) 
	End if
	blnFirst = False
Next
%>;	   
end <%= MontaNomeProcedure(objTabela.Name, "_D")%>;
<%  
'**************************************************
'Grava 1 procedure por arquivo
'**************************************************
filename = strCaminhoSQL
intTamanho = Len(filename)
intPosicaoBarra = InStrRev(filename, "\") 

If Not intPosicaoBarra = intTamanho Then
	filename = filename & "\"
End If

filename = filename & MontaNomeProcedure(objTabela.Name, "_D") & ".SQL"

output.save filename, false
strBuffer = strBuffer & output.text
output.clear	


'Se desejar gravar todas as procedures em 1 arquivo só, descomentar o código abaixo
'==================================================================================
'intTamanho = Len(strCaminhoSQL) 
'intPosicaoBarra = InStrRev(strCaminhoSQL, "\") 
'
'If Not intPosicaoBarra = intTamanho Then 
'  strCaminhoSQL = strCaminhoSQL & "\" 
'End If 
'
'strNomeArquivoSaida = strCaminhoSQL & "_Procs.sql" 
'output.save strCaminhoSQL, false 

'*********
'* Model *
'*********
Set props = objTabela.Properties

bOtherColumns = (objTabela.Columns.Count > objTabela.PrimaryKeys.Count)
nomeClasse = objTabela.description	
nomeTabela = Ucase(TrimSpaces(objTabela.Alias))
nomeProcedure = GetNomeProcedure(nomeTabela)
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Now we have the table that we desire to build a Business Object From, let us begin.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

entidadeNegocio = nomeClasse & "DTO"
entidadeDataTable = nomeClasse & "DataTable"

bPossuiSequence = false
strPropNameSequence = "SEQ:I:" + ucase(objTabela.name)
For Each objColumn in objTabela.Columns					
	If props.ContainsKey(strPropNameSequence) Then					
		bPossuiSequence = true
		exit for
	End If
Next
%>
using System;
using System.Text;
using System.Data;
using HospitalAnaCosta.Framework.Data;
using System.Data.Common;
using <%= namespaceDTO%>;

namespace <%= namespaceModel %>
{
	public partial class <%= nomeClasse%> : Entity
	{			
		/// <summary>
		/// Listar todos os registros
		/// </summary>
		public <%= entidadeDataTable%> Listar(<%= entidadeNegocio%> dto)
		{            
			#region "Parametros"
			DbParameterCollection param = Connection.CreateDataParameterCollection();            
			
			//Parametro Cursor
			param.Add(Connection.CreateParameterCursor());
<%
			For Each objColumn in objTabela.Columns
				name = "p"&UCase(objColumn.name)%>
			//Parametro <%=name%>
			param.Add(Connection.CreateParameter("<%=name%>", dto.<%=objColumn.description%>.DBValue, ParameterDirection.Input, dto.<%=objColumn.description%>.DbType));
<%			Next
%>			#endregion	
			
			<%= entidadeDataTable%> result = new <%= entidadeDataTable%>();
			string query = "<%=nomeProcedure%>_L";
			
			//Executa o procedimento
			Connection.RecordSet(query, ref param, result, CommandType.StoredProcedure);
			
			return result;
		}

		/// <summary>
		/// Listar o registro utilizando PK
		/// </summary>
		public <%= entidadeNegocio%> Pesquisar(<%= entidadeNegocio%> dto)
		{            
			#region "Parametros"
			DbParameterCollection param = Connection.CreateDataParameterCollection();            
			
			//Parametro Cursor
			param.Add(Connection.CreateParameterCursor());
			<%For Each objColumn in objTabela.PrimaryKeys
				name = "p"&UCase(objColumn.name)
			%>
			// Parametro <%=name%>
			param.Add(Connection.CreateParameter("<%=name%>", dto.<%=objColumn.description%>.DBValue, ParameterDirection.Input, dto.<%=objColumn.description%>.DbType));
			<%Next%>
			
			#endregion	
			
			<%= entidadeDataTable%> result = new <%= entidadeDataTable%>();
			string query = "<%=nomeProcedure%>_S";
			
			//Executa o procedimento
			Connection.RecordSet(query, ref param, result, CommandType.StoredProcedure);
			
			if (result.Rows.Count > 0)
				return result.TypedRow(0);
			else
				return null;
		}

		
		/// <summary>
		/// Exclui o registro
		/// </summary>        

		public void Excluir(<%= entidadeNegocio%> dto)
		{
			#region "Parametros"            
			DbParameterCollection param = Connection.CreateDataParameterCollection();            		
			<%For Each objColumn in objTabela.PrimaryKeys
				name = "p"&UCase(objColumn.name)
			%>
			// Parametro <%=name%>
			param.Add(Connection.CreateParameter("<%=name%>", dto.<%=objColumn.description%>.DBValue, ParameterDirection.Input, dto.<%=objColumn.description%>.DbType));
			<%Next%>
		
		   #endregion				
			//Executa o procedimento
			
			string query = "<%=nomeProcedure%>_D";
			
			Connection.ExecuteCommand(query, ref param, CommandType.StoredProcedure);
		}
		
		/// <summary>
		/// Altera o registro
		/// </summary>			
		public void Alterar(<%= entidadeNegocio%> dto)
		{	
			#region "Parametros"            
			DbParameterCollection param = Connection.CreateDataParameterCollection();			
			<%
			For Each objColumn in objTabela.Columns
				name = "p"&UCase(objColumn.name)%>
			//Parametro <%=name%>
			param.Add(Connection.CreateParameter("<%=name%>", dto.<%=objColumn.description%>.DBValue, ParameterDirection.Input, dto.<%=objColumn.description%>.DbType));
			<% Next%>
			#endregion	

			string query = "<%=nomeProcedure%>_U";
			
			Connection.ExecuteCommand(query, ref param, CommandType.StoredProcedure);
		}
		
		/// <summary>
		/// Inclui o registro
		/// </summary>			
		public void Incluir(<%= entidadeNegocio%> dto)
		{			
			string query = "<%=nomeProcedure%>_I";

			#region "Parametros"            
			DbParameterCollection param = Connection.CreateDataParameterCollection();			
<%          if (bPossuiSequence) then%>			
			//Parametro Sequence			
			param.Add(Connection.CreateParameterSequence());
<%          end if%>			
			<%
			For Each objColumn in objTabela.Columns
				name = "p"&UCase(objColumn.name)%>
			//Parametro <%=name%>
			param.Add(Connection.CreateParameter("<%=name%>", dto.<%=objColumn.description%>.DBValue, ParameterDirection.Input, dto.<%=objColumn.description%>.DbType));
			<% Next%>
			#endregion	

			// Executa o Procedimento
			Connection.ExecuteCommand(query, ref param, CommandType.StoredProcedure);						
<%          if (bPossuiSequence) then%>				
			//Recupera o valor da Sequence utilizado na procedure     
			<%For Each objColumn in objTabela.PrimaryKeys%>
						
			   dto.<%=objColumn.description%>.Value = Int32.Parse(param["pNewIdt"].Value.ToString());
			<%Next%>
<%         end if%>
		}	
	}
}
<% 
	' Save the output file for this Table
	filename = strCaminhoModel
	lenth = Len(filename)
	pos = InStrRev(filename, "\") 

	If Not pos = lenth Then
		filename = filename & "\"
	End If

	filename = filename & objTabela.description & ".cs"

	output.save filename, false
	buffer = buffer & output.text
	output.clear

output.write buffer
output.clear

'*************
'* Interface *
'*************
bOtherColumns = (objTabela.Columns.Count > objTabela.PrimaryKeys.Count)

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Now we have the table that we desire to build a Business Object From, let us begin.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

entidadeNegocio = objTabela.description & "DTO"
dataLayer = objTabela.description & "DataTable" %>
using System;
using System.Text;
using HospitalAnaCosta.Framework;
using <%= namespaceDTO%>;

namespace <%= namespaceInterface %>
{
	public interface I<%= objTabela.description%>
	{
		<%=dataLayer%> Listar(<%=entidadeNegocio%> dto);

		<%=entidadeNegocio%> Incluir(<%=entidadeNegocio%> dto);

		void Excluir(<%=entidadeNegocio%> dto);
		
		void Alterar(<%=entidadeNegocio%> dto);
		
		<%=entidadeNegocio%> Pesquisar(<%=entidadeNegocio%> dto);
	}
}
<% 
	' Save the output file for this Table
	filename = strCaminhoInterface

	lenth = Len(filename)
	pos = InStrRev(filename, "\") 

	If Not pos = lenth Then
		filename = filename & "\"
	End If

	filename = filename & objTabela.description & ".cs"

	output.save filename, false
	buffer = buffer & output.text
	output.clear
	
output.write buffer
output.clear

'*******
'* DTO *
'*******
%>
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Data.Common;
using System.Runtime.Serialization;
using System.Xml;
using System.IO;
using MVC = HospitalAnaCosta.Framework;

namespace <%= namespaceDTO %>
{
	/// <summary>
	/// Classe Entidade <%= objTabela.description %>DataTable
	/// </summary>
	[Serializable()]
	public class <%= objTabela.description %>DataTable : DataTable
	{
		
		public <%= objTabela.description %>DataTable()
			: base()
		{
		
			this.TableName = "<%= objTabela.description %>";

<%		output.tabLevel = 3

					' Lista as variáveis privadas
					For Each objColuna In objTabela.Columns						
						name = objColuna.description
						output.autoTabLn "this.Columns.Add(" & objTabela.description  & "DTO.FieldNames." & name & ", typeof("&objColuna.LanguageType&"));"
					Next%>

			<%  bInFirst = true		
				coluna = ""
				For Each objColuna in objTabela.PrimaryKeys

					If Not bInFirst Then 
						coluna = coluna &  ", "
					End if	
					coluna = coluna & "this.Columns["&objTabela.description&"DTO.FieldNames."& objColuna.description &"]"
					bInFirst = false
					
				Next%>
			DataColumn[] primaryKey = { <%=coluna%> };

			this.PrimaryKey = primaryKey;
		}
		
		protected <%= objTabela.description %>DataTable(SerializationInfo serializationInfo, StreamingContext streamingContext)
		: base(serializationInfo, streamingContext){}


		public <%= objTabela.description %>DTO TypedRow(int index)
		{
			return (<%= objTabela.description %>DTO)this.Rows[index];
		}
		
		public string GetXml()
		{
			string ret;
			UTF8Encoding utf8 = new UTF8Encoding();

			MemoryStream stream = new MemoryStream();
			this.WriteXml(stream);
			ret = utf8.GetString(stream.ToArray());
			stream.Close();
			return ret;
		}
		
		public XmlDocument WriteXml()
		{
			XmlDocument ret = new XmlDocument();
			ret.LoadXml(this.GetXml());
			return ret;
		}

		public void Add(<%= objTabela.description %>DTO dto)
		{
			DataRow dtr = this.NewRow();

<%		output.tabLevel = 3

					' Lista as variáveis privadas
					For Each objColuna In objTabela.Columns
						name = objColuna.description
						dto =  objTabela.description & "DTO"
						tipoColuna = objColuna.LanguageType
						output.autoTabLn "if (!dto."&name&".Value.IsNull) dtr["&dto&".FieldNames."&name&"] = ("&tipoColuna&")dto."&name&".Value;"
					Next%>
			
			this.Rows.Add(dtr);
		}
		
		public <%= objTabela.description %>Enumerator GetEnumerator()
		{
			return new <%= objTabela.description %>Enumerator(this);
		}
	}
	
	// Inner class implements IEnumerator interface:
	public class <%= objTabela.description %>Enumerator
	{
		private int position = -1;
		private DataTable dtb;

		public <%= objTabela.description %>Enumerator(DataTable dtb)
		{
			this.dtb = dtb;
		}

		// Declare the MoveNext method required by IEnumerator:
		public bool MoveNext()
		{
			if (position < dtb.Rows.Count - 1)
			{
				position++;
				return true;
			}
			else
			{
				return false;
			}
		}

		// Declare the Reset method required by IEnumerator:
		public void Reset()
		{
			position = -1;
		}

		// Declare the Current property required by IEnumerator:
		public <%= objTabela.description %>DTO Current
		{
		get
			{
				<%= objTabela.description %>DTO dto = new <%= objTabela.description %>DTO();			
				<%For Each objColuna in objTabela.Columns%>dto.<%=objColuna.description%>.Value = dtb.Rows[position][<%= objTabela.description %>DTO.FieldNames.<%=objColuna.description%>].ToString();
				<%Next%>
				return dto;
			}
		}
	}
	
	[Serializable()]
	public class <%= objTabela.description %>DTO : MVC.DTO.DTOBase
	{	
<%For Each objColuna In objTabela.Columns				
			name = lcase(objColuna.name)			
			output.autoTabLn "private MVC.DTO."&ConvertDataType(objColuna)&" " & name &";"			
		Next%>
		
		public <%= objTabela.description %>DTO()
		{
			InitializeComponent();
		}
		
		internal void InitializeComponent()
		{
<%For Each objColuna In objTabela.Columns						
				name = objColuna.description
				coluna = lcase(objColuna.name)
				if (lcase(objColuna.LanguageType) = "string") then
				 output.autoTabLn "this."& coluna &"= new MVC.DTO."&ConvertDataType(objColuna)&"(FieldNames."&name&",Captions."&name&", "&objColuna.CharacterMaxLength&");"
				end if
				if (lcase(objColuna.LanguageType) = "decimal") then
				 output.autoTabLn "this."& coluna &"= new MVC.DTO."&ConvertDataType(objColuna)&"(FieldNames."&name&",Captions."&name&", DbType.Decimal);"
				end if
				if (lcase(objColuna.LanguageType) = "datetime") then
				 output.autoTabLn "this."& coluna &"= new MVC.DTO."&ConvertDataType(objColuna)&"(FieldNames."&name&",Captions."&name&");"
				end if
			Next%>		
		}
 
		#region FieldNames

		public struct FieldNames
		{
<%  For Each objColuna In objTabela.Columns						
				name = objColuna.description
				output.autoTabLn "public const string "& name &"=""" &UCase(objColuna.name)&""";"
			Next%>		
		}		

		#endregion

		#region Captions
		public struct Captions
		{
<%  For Each objColuna In objTabela.Columns						
				name = objColuna.description
				output.autoTabLn "public const string "& name &"=""" &UCase(name)&""";"
			Next%>		
		}		

		#endregion
		
		#region Atributos Publicos

<% For Each objColuna in objTabela.Columns 
			 nomePropriedade = objColuna.description
			 name = lcase(objColuna.name)%>
			 
		public MVC.DTO.<%= ConvertDataType(objColuna) %> <%= nomePropriedade %>
		{
			get { return <%= name %>; }
			set { <%= name%> = value; }
		}
		<% Next %>			
			
		#endregion


		#region Operators

		public static explicit operator <%= objTabela.description %>DTO(DataRow row)
		{
			<%= objTabela.description %>DTO  dto = new <%= objTabela.description %>DTO();
			<% For Each objColuna in objTabela.Columns %>dto.<%=objColuna.description%>.Value = row[FieldNames.<%=objColuna.description%>].ToString();
			<%Next%>
			
			return dto;
		}

		public static explicit operator <%= objTabela.description %>DTO(XmlDocument xml)
		{
			<%= objTabela.description %>DTO dto = new <%= objTabela.description %>DTO();
			<% For Each objColuna in objTabela.Columns%>if (xml.FirstChild.SelectSingleNode(FieldNames.<%=objColuna.description%>) != null) dto.<%=objColuna.description%>.Value = xml.FirstChild.SelectSingleNode(FieldNames.<%=objColuna.description%>).InnerText;			
			<%Next%>
			return dto;
		}

		public override XmlDocument GetXML()
		{
			XmlDocument xml = new XmlDocument();
			XmlNode nodeData = xml.CreateNode(XmlNodeType.Element, "DADOS", null);
			<%For Each objColuna in objTabela.Columns%>XmlNode node<%=objColuna.description%> = xml.CreateNode(XmlNodeType.Element, FieldNames.<%=objColuna.description%>, null);
			<%Next%>
			<%For Each objColuna in objTabela.Columns%>if (!this.<%=objColuna.description%>.Value.IsNull) node<%=objColuna.description%>.InnerText = this.<%=objColuna.description%>.Value;
			<%Next%>
			<%For Each objColuna in objTabela.Columns%>nodeData.AppendChild(node<%=objColuna.description%>);
			<%Next%>			
			xml.AppendChild(nodeData);
			return xml;
		}

		public static explicit operator DataRow(<%= objTabela.description %>DTO dto)
		{
			<%= objTabela.description %>DataTable dtb = new <%= objTabela.description %>DataTable();
			DataRow dtr = dtb.NewRow();
			<%For Each objColuna in objTabela.Columns%>dtr[FieldNames.<%=objColuna.description%>] = dto.<%=objColuna.description%>.Value;
			<%Next%>
			return dtr;
		}

		public static explicit operator XmlDocument(<%= objTabela.description %>DTO dto)
		{
			return dto.GetXML();
		}

		#endregion
	}
}

<% 
	' Salva o arquivo de saída
	filename = strCaminhoDTO
	intTamanho = Len(filename)
	intPosicaoBarra = InStrRev(filename, "\") 

	' Se o número total de caracteres do nome do arquivo de saída for igual ao número de caracteres antes da última barra
	If Not intPosicaoBarra = intTamanho Then
		filename = filename & "\"
	End If

	filename = filename & objTabela.description & "DTO.cs"

	output.save filename, false
	buffer = buffer & output.text
	output.clear

output.write buffer
output.clear

'***********
'* Control *
'***********

bOtherColumns = (objTabela.Columns.Count > objTabela.PrimaryKeys.Count)

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Now we have the table that we desire to build a Business Object From, let us begin.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

entidadeNegocio = objTabela.description & "DTO"
dataLayer = objTabela.description & "DataTable" %>
using System;
using System.Text;
using HospitalAnaCosta.Framework;
using <%= namespaceDTO%>;
using <%= namespaceInterface%>;

namespace <%= namespaceControl %>
{
	public class <%= objTabela.description%> : Control, I<%= objTabela.description%>
	{
		private Model.<%=objTabela.description%> entity = new Model.<%=objTabela.description%>() ;

		/// <summary>
		/// Listar todos os registros
		/// </summary>
		public <%=dataLayer%> Listar(<%=entidadeNegocio%> dto)
		{	
			return entity.Listar(dto);
		}

		/// <summary>
		/// Obter pela chave
		/// </summary>
		public <%=entidadeNegocio%> Pesquisar(<%=entidadeNegocio%> dto)
		{	
			return entity.Pesquisar(dto);
		}
		
		///<summary>
		/// Insere um registro
		/// </summary>
		public <%=entidadeNegocio%> Incluir(<%=entidadeNegocio%> dto)
		{
			//PassportVO passportVO = (PassportVO)Credential;
			dto.DataUltimaAtualizacao.Value = DateTime.Now;
			//dto.IdtUsuario.Value = passportVO.Usuario.Idt;

			entity.Incluir(dto);
			return dto;
		}

		///<summary>
		/// Apaga um registro
		/// </summary>		
		public void Excluir(<%=entidadeNegocio%> dto)
		{
			entity.Excluir(dto);
		}
		
		///<summary>
		/// Atualiza um registro
		/// </summary>		
		public void Alterar(<%=entidadeNegocio%> dto)
		{
			//PassportVO passportVO = (PassportVO)Credential;
			dto.DataUltimaAtualizacao.Value = DateTime.Now;
			//dto.IdtUsuario.Value = passportVO.Usuario.Idt;
		
			entity.Alterar(dto);
		}
	}
}
<% 
	' Save the output file for this Table
	filename = strCaminhoControl
	lenth = Len(filename)
	pos = InStrRev(filename, "\") 

	If Not pos = lenth Then
		filename = filename & "\"
	End If

	filename = filename & objTabela.description & ".cs"

	output.save filename, false
	buffer = buffer & output.text
	output.clear
			End If
		End If
	Next 
End If	

'***********
'* Funções *
'***********

Function GetNomeProcedure(nomeTabela)
	nomeProcedure = ucase(nomeTabela)
	nomeProcedure = prefixoProcedure + mid(nomeTabela,4) + sufixoProcedure
	GetNomeProcedure = nomeProcedure
End Function

Function GetName(str)
	name = lcase(str)
	GetName = UCase(Left(name, 1)) & Right(name, Len(name) -1)
End Function

Function VerificaTipoColunaNull(objColumn)		
	Select Case objColumn.LanguageType
		Case "long", "decimal", "double", "int", "bool", "DateTime", "short"
			VerificaTipoColunaNull = objColumn.LanguageType & "?"
		Case Else
			VerificaTipoColunaNull = objColumn.LanguageType
	End Select	
End Function

Function VerificaTipoColuna(objColumn)	
	
	Select Case objColumn.LanguageType
		Case "string"
			VerificaTipoColuna = "GetAsString"
		Case "long"
			VerificaTipoColuna = "GetAsLong"
		Case "short"
			VerificaTipoColuna = "GetAsShort"
		Case "decimal"
			VerificaTipoColuna = "GetAsDecimal"
		Case "double"
			VerificaTipoColuna = "GetAsDouble"
		Case "bool"
			VerificaTipoColuna = "GetAsBoolean"
		Case "int"
			VerificaTipoColuna = "GetAsInt"
		Case "DateTime"
			VerificaTipoColuna = "GetAsDateTime"
			
	End Select	
End Function


Function GetParameterName(objColuna)
	name = TrimSpaces(objColuna.Name)
	GetParameterName = name
End Function

'Monta o nome da procedure a partir do nome da tabela e tipo
'Ex: nome da tabela = TB_SEG_MOD_MODULO
'    tipo = _D
'Ex. Retorno = PRC_SEG_MOD_MODULO_D
Function MontaNomeProcedure(strNomeTabela, strTipo)
	strRetorno = mid(ucase(TrimSpaces(strNomeTabela)),4)
	strRetorno = prefixoProcedure & strRetorno + sufixoProcedure + strTipo
	MontaNomeProcedure = strRetorno
End Function

'===========================================================================
' These are support routines called by the above scirpt
'===========================================================================
Function GetAlias(objColumn)
	alias = TrimSpaces(objColumn.Alias)
	GetAlias = UCase(Left(alias, 1)) & Right(alias, Len(alias) -1)
End Function

Function GetName(objColumn)
	name = objColumn.Name
	GetName = UCase(Left(name, 1)) & Right(name, Len(name) -1)
End Function

Function TrimSpaces(str)
	name = ""
	tname = str
	l = Len(tname)

	For j = 1 To l
		char = Mid(tname, j, 1)
		If Not char = " " Then
			name = name & char
		End If
	Next

	TrimSpaces = name
End Function

'=======================
' PEGA O NOME DA COLUNA
'=======================
FUNCTION GetName(str)
	name = lcase(str)
	GetName = Left(name, 1) & Right(name, Len(name) -1)
END FUNCTION

'=======================
' PEGA O TIPO DA COLUNA 
'=======================

FUNCTION ConvertDataType(objColuna)
	SELECT CASE lcase(objColuna.LanguageType)
		CASE "short", "int", "long", "decimal", "double", "integer", "number"
			ConvertDataType = "FieldDecimal"
		CASE "string", "varchar", "varchar2"
			ConvertDataType = "FieldString"
		CASE "datetime"
			ConvertDataType = "FieldDateTime"
	END SELECT
	
END FUNCTION

'=======================
' PEGA O TIPO DA COLUNA 
'=======================

FUNCTION VerificaTipoColunaNull(objColuna)	

	SELECT CASE lcase(objColuna.LanguageType)
		CASE "byte", "short", "int", "long", "decimal", "double", "bool", "datetime", "number"
			VerificaTipoColunaNull = objColuna.LanguageType & "?"
		CASE ELSE
			VerificaTipoColunaNull = objColuna.LanguageType
	END SELECT

END FUNCTION

'=========================================
' RETIRA OS CARACTERES INVÁLIDOS DA STRING
'=========================================
FUNCTION RetiraCaracteresInvalidos(str)

	str = Replace(str, ">", "")
	str = Replace(str, "<", "")
	
	RetiraCaracteresInvalidos = str

END FUNCTION
%>
##|BODY_END
