##|TYPE Template
##|UNIQUEID a5fb853d-85d4-4c3d-af27-6185d4194531
##|TITLE Gerador de BusinessLayer Oracle
##|NAMESPACE C# - Visual Studio 2005
##|SOURCE_TYPE Source
##|OUTPUT_LANGUAGE C#
##|COMMENTS_BEGIN
Use o Gerador de BusinessLayer para gerar classes com os métodos básicos: Incluir, Excluir, Alterar, Obter e Listar. Selecione multiplas tabelas e gere todas as suas classes Business em um click!
##|COMMENTS_END
##|GUI_ENGINE Microsoft Script
##|GUI_LANGUAGE VBScript
##|GUI_BEGIN
Dim cmbDatabases
Dim lstTables
Dim chk

Sub setup()

	If Not input.Contains("lstTables") Or Not input.Contains("txtPath") Then

		ui.Title = "Gerador de Interface."
		ui.Width  = 330
		ui.Height = 530

		' Grab default output path
		Dim sOutputPath
		sOutputPath = ""
		If input.Contains("defaultOutputPath") Then 
			sOutputPath = "C:\Geracao\Interface"
		End If

		ui.AddLabel "lblPath", "Caminho de saída: ",  "Selecione o caminho de saída."
		ui.AddTextBox "txtPath", sOutputPath, "Selecione o caminho de saída."
		ui.AddFilePicker "btnPath", "Seleciona o Caminho", "Seleciona o caminho de saída.", "txtPath", true

		ui.AddLabel "lblNamespaceEntidade", "Namespace: ",  "Namespace"
		ui.AddTextBox "txtNamespace", "HospitalAnaCosta.Services.CadastroFaturamento.Interface", "Informe o Namespace."			

		ui.AddLabel "lblNamespace", "Namespace BusinessLayer: ",  "Namespace do Data Transfer Object."
		ui.AddTextBox "txtNamespaceDTO", "HospitalAnaCosta.Services.CadastroFaturamento.DTO", "Informe o Namespace do DTO."

		' List Databases in a ComboBox
		ui.AddLabel "lblDatabases", "Selecione o Database:", "Selecione o Database abaixo."
		Set cmbDatabases = ui.AddComboBox("cmbDatabase", "Selecione o Database.")

		' List Tables in a listbox
		ui.AddLabel "lblTables", "Selecione as tabelas:", "Selecione as tabelas abaixo."
		Set lstTables = ui.AddListBox ("lstTables", "Selecione as tabelas:")
		'lstTables.IsMultiSelect = false
		lstTables.Height = 120
		
		' Attach the onchange event to the cmbDatabases control.
		setupDatabaseDropdown cmbDatabases
		
		'Posiciona a combo de database e seleciona as tables
		cmbDatabases.SelectedValue = "SGS"
		cmbDatabases_onchange(cmbDatabases)
		
		ui.ShowGUI = true
	Else 
		ui.ShowGUI = false
	End if

End Sub

Sub setupDatabaseDropdown(cmbDatabases)
	cmbDatabases.BindData MyMeta.Databases
	
	If Not MyMeta.DefaultDatabase Is Nothing Then
		cmbDatabases.SelectedValue = MyMeta.DefaultDatabase.Name
		bindTables cmbDatabases.SelectedValue
	End If
	
	cmbDatabases.AttachEvent "onchange", "cmbDatabases_onchange"
End Sub

Sub bindTables(sDatabase)
	Set db = MyMeta.Databases(sDatabase)
	lstTables.BindData(db.Tables)
End Sub

' Event Handler
Sub cmbDatabases_onchange(control)
	Set cmbDatabases = ui.item("cmbDatabase")
	bindTables cmbDatabases.SelectedText
End Sub
##|GUI_END
##|BODY_MODE Markup
##|BODY_ENGINE Microsoft Script
##|BODY_LANGUAGE VBScript
##|BODY_TAG_START <%
##|BODY_TAG_END %>
##|BODY_BEGIN
<%
'------------------------------------------------------------------------------
' Gerador_Interface.vbgen
' Data de Criação : 18/03/2008
' Autor: Bruno Alvares da Costa
'
'------------------------------------------------------------------------------

Dim bFirst
Dim name
Dim alias
Dim objTable
Dim objColumn
Dim tableNames
Dim language
Dim databaseName
Dim database
Dim namespace
Dim namespaceEntidade
Dim namespaceData
Dim bOtherColumns

Dim IDbCommand
Dim IDataParameter
Dim ParameterPrefix
Dim entidade
Dim entidadeNegocio
Dim dataLayer

' Grab the namespace
namespace = input.Item("txtNamespace")

' Grab the namespace DataLayer
namespaceDTO = input.Item("txtNamespaceDTO")

' Grab the choices the user made in our UI Script (see Interface Code tab)
Set tableNames = input.Item("lstTables")

databaseName  = input.Item("cmbDatabase")
Set database = MyMeta.Databases(databaseName)

' Loop through the tables the user selected and generate the business entities
For intLp = 0 To tableNames.Count - 1

	Set objTable = database.Tables(tablenames.item(intLp))	
	bOtherColumns = (objTable.Columns.Count > objTable.PrimaryKeys.Count)

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Now we have the table that we desire to build a Business Object From, let us begin.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

entidadeNegocio = objTable.description & "DTO"
dataLayer = objTable.description & "DataTable" %>
using System;
using System.Text;
using HospitalAnaCosta.Framework;
using <%= TrimSpaces(namespaceDTO)%>;

namespace <%= TrimSpaces(namespace) %>
{
	public interface I<%= objTable.description%>
	{
		<%=dataLayer%> Listar(<%=entidadeNegocio%> dto);

		<%=entidadeNegocio%> Incluir(<%=entidadeNegocio%> dto);

		void Excluir(<%=entidadeNegocio%> dto);
		
		void Alterar(<%=entidadeNegocio%> dto);
		
		<%=entidadeNegocio%> Pesquisar(<%=entidadeNegocio%> dto);
	}
}
<% 
	' Save the output file for this Table
	Dim filename
	filename = input.item("txtPath")

	Dim length
	Dim pos
	lenth = Len(filename)
	pos = InStrRev(filename, "\") 

	If Not pos = lenth Then
		filename = filename & "\"
	End If

	filename = filename & objTable.description & ".cs"

	output.save filename, false
	buffer = buffer & output.text
	output.clear
Next '  tableName
	
	output.write buffer
 %>

<% 
'===========================================================================
' These are support routines called by the above scirpt
'===========================================================================
Function GetAlias(objColumn)
	Dim alias
	alias = TrimSpaces(objColumn.Alias)
	GetAlias = UCase(Left(alias, 1)) & Right(alias, Len(alias) -1)
End Function

Function GetName(objColumn)
	Dim name
	name = objColumn.Name
	GetName = UCase(Left(name, 1)) & Right(name, Len(name) -1)
End Function

Function TrimSpaces(str)

	Dim tname
	Dim name
	Dim char
	Dim l

	name = ""
	tname = str
	l = Len(tname)

	For j = 1 To l
		char = Mid(tname, j, 1)
		If Not char = " " Then
			name = name & char
		End If
	Next

	TrimSpaces = name
End Function
%>
##|BODY_END
