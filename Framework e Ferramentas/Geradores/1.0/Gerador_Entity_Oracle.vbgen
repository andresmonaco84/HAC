##|TYPE Template
##|UNIQUEID 076e307a-2d8b-4e10-bcd9-a23d0df3ff87
##|TITLE Gerador de Entidades Oracle
##|NAMESPACE 
##|SOURCE_TYPE Source
##|OUTPUT_LANGUAGE C#
##|GUI_ENGINE Microsoft Script
##|GUI_LANGUAGE VBScript
##|GUI_BEGIN
Dim cmbDatabases
Dim lstTables
Dim chk

Sub setup()

	If Not input.Contains("lstTables") Or Not input.Contains("txtPath") Then

		ui.Title = "Gerador de Entidades (Oracle)"
		ui.Width  = 330
		ui.Height = 430

		' Grab default output path
		Dim sOutputPath
		sOutputPath = ""
		If input.Contains("defaultOutputPath") Then 
			sOutputPath = input.Item("defaultOutputPath")
		End If

		' ------ MONTA CAMPO PARA ESCOLHER O CAMINHO DE SAÍDA ------
		ui.AddLabel "lblPath", "Caminho de saída: ",  "Selecione o caminho de saída."
		ui.AddTextBox "txtPath", sOutputPath, "Selecione o caminho de saída."
		ui.AddFilePicker "btnPath", "Seleciona o Caminho", "Seleciona o caminho de saída.", "txtPath", true
		' ------ MONTA CAMPO PARA ESCOLHER O CAMINHO DE SAÍDA ------

		' ------ MONTA CAMPO PARA ESCOLHER O NAMESPACE ------
		ui.AddLabel "lblNamespaceEntidade", "Namespace das Entidades: ",  "Namespace das entidades."
		ui.AddTextBox "txtNamespaceEntidade", "HospitalAnaCosta.SGS.Model", "Informe o Namespace das entidades."			
		' ------ MONTA CAMPO PARA ESCOLHER O NAMESPACE ------

		' ------ LISTA OS BANCOS DE DADOS DO SERVIDOR ------
		ui.AddLabel "lblDatabases", "Selecione o Database:", "Selecione o Database abaixo."
		Set cmbDatabases = ui.AddComboBox("cmbDatabase", "Selecione o Database.")
		' ------ LISTA OS BANCOS DE DADOS DO SERVIDOR ------

		' ------ LISTA TODAS AS TABELAS DO BANCO DE DADOS ------
		ui.AddLabel "lblTables", "Selecione as tabelas:", "Selecione as tabelas abaixo."
		Set lstTables = ui.AddListBox ("lstTables", "Selecione as tabelas:")
		lstTables.IsMultiSelect = false
		lstTables.Height = 120
		' ------ LISTA TODAS AS TABELAS DO BANCO DE DADOS ------

		' Adiciona o evento onchange
		setupDatabaseDropdown cmbDatabases
		
		ui.ShowGUI = true
	Else 
		ui.ShowGUI = false
	End if

End Sub

Sub setupDatabaseDropdown(cmbDatabases)
	cmbDatabases.BindData MyMeta.Databases
	
	If Not MyMeta.DefaultDatabase Is Nothing Then
		cmbDatabases.SelectedValue = MyMeta.DefaultDatabase.Name
		bindTables cmbDatabases.SelectedValue
	End If
	
	cmbDatabases.AttachEvent "onchange", "cmbDatabases_onchange"
End Sub

Sub bindTables(sDatabase)
	Set db = MyMeta.Databases(sDatabase)
	lstTables.BindData(db.Tables)
End Sub

' Event Handler
Sub cmbDatabases_onchange(control)
	Set cmbDatabases = ui.item("cmbDatabase")
	bindTables cmbDatabases.SelectedText
End Sub
##|GUI_END
##|BODY_MODE Markup
##|BODY_ENGINE Microsoft Script
##|BODY_LANGUAGE VBScript
##|BODY_TAG_START <%
##|BODY_TAG_END %>
##|BODY_BEGIN
<%
'------------------------------------------------------------------------------
' Gerador_Entity_Oracle.vbgen
' Data de Criação : 25/01/2007
' Autor: Carlos Eduardo Pereira de Araujo
'
' OBSERVAÇÕES IMPORTANTES:
' Configurar: Default settings
' -Alterar DbTarget para DBType
' -Alterar Language para C#
'
'------------------------------------------------------------------------------

Dim objTabela			' Objeto que armazena os dados da tabela
Dim objColuna			' Objeto que armazena os dados da coluna da tabela
Dim objBaseDados		' Objeto que armazena os dados do banco de dados

Dim lstNomeTabelas		' Armazena a lista de tabelas selecionadas pelo usuário
Dim strNomeBaseDados	' Armazena o nome do Banco de Dados
Dim strNamespace		' Armazena o namespace da entidade

' Armazena o namespace da entidade
strNamespace = input.Item("txtNamespaceEntidade")

' Armazena a lista de tabelas selecionadas pelo usuário
Set lstNomeTabelas = input.Item("lstTables")

' Armazena o nome do Banco de Dados
strNomeBaseDados  = input.Item("cmbDatabase")
Set objBaseDados = MyMeta.Databases(strNomeBaseDados)

' Loop through the tables the user selected and generate the business entities
For intLp = 0 To lstNomeTabelas.Count - 1
	Set objTabela = objBaseDados.Tables(lstNomeTabelas.item(intLp))%>
using System;
using HospitalAnaCosta.Framework.ValueObject;

namespace <%= TrimSpaces(strNamespace) %>
{
	/// <summary>
	/// Classe Entidade <%= objTabela.description %>VO
	/// </summary>
	[Serializable()]
	public class <%= objTabela.description %>VO : BaseVO
	{
<%		output.tabLevel = 2

		' Lista as variáveis privadas
		For Each objColuna In objTabela.Columns						
			name = lcase(objColuna.name)
			output.autoTabLn "private " & VerificaTipoColunaNull(objColuna) & " _" & name & ";"
		Next
%>
		#region Properties
		<% For Each objColuna in objTabela.Columns 
		     nomePropriedade = objColuna.description
		     name = lcase(objColuna.name)
		%>
		public <%= VerificaTipoColunaNull(objColuna) %> <%= nomePropriedade %>
		{
			get { return _<%= name %>; }
			set { _<%= name%> = value; }
		}
		<% Next %>
		#endregion		
	}
}	
<% 
	' Salva o arquivo de saída
	Dim strNomeArquivoSaida
	strNomeArquivoSaida = input.item("txtPath")

	Dim intTamanho
	Dim intPosicaoBarra
	intTamanho = Len(strNomeArquivoSaida)
	intPosicaoBarra = InStrRev(strNomeArquivoSaida, "\") 

    ' Se o número total de caracteres do nome do arquivo de saída for igual ao número de caracteres antes da última barra
	If Not intPosicaoBarra = intTamanho Then
		strNomeArquivoSaida = strNomeArquivoSaida & "\"
	End If

	strNomeArquivoSaida = strNomeArquivoSaida & objTabela.description & "VO.cs"

	output.save strNomeArquivoSaida, false
	buffer = buffer & output.text
	output.clear
Next '  tableName	
output.write buffer

'=======================================
' RETIRA OS ESPAÇOS A DIREITA DA STRING
'=======================================
Function TrimSpaces(str)

	Dim tname
	Dim name
	Dim char
	Dim l

	name = ""
	tname = str
	l = Len(tname)

	For j = 1 To l
		char = Mid(tname, j, 1)
		If Not char = " " Then
			name = name & char
		End If
	Next

	TrimSpaces = name
End Function

'=======================
' PEGA O NOME DA COLUNA
'=======================
FUNCTION GetName(str)
	Dim name
	name = lcase(str)
	GetName = Left(name, 1) & Right(name, Len(name) -1)
END FUNCTION

'=======================
' PEGA O TIPO DA COLUNA 
'=======================

FUNCTION VerificaTipoColunaNull(objColuna)	

	SELECT CASE objColuna.LanguageType
		CASE "byte", "short", "int", "long", "decimal", "double", "bool", "DateTime"
			VerificaTipoColunaNull = objColuna.LanguageType & "?"
		CASE ELSE
			VerificaTipoColunaNull = objColuna.LanguageType
	END SELECT

END FUNCTION

'=========================================
' RETIRA OS CARACTERES INVÁLIDOS DA STRING
'=========================================
FUNCTION RetiraCaracteresInvalidos(str)

	str = Replace(str, ">", "")
	str = Replace(str, "<", "")
	
	RetiraCaracteresInvalidos = str

END FUNCTION
%>
##|BODY_END
