##|TYPE Template
##|UNIQUEID aab88a65-e4f7-4a39-9755-fc75db1e6152
##|TITLE Gerador de DataLayer Oracle
##|NAMESPACE 
##|SOURCE_TYPE Source
##|OUTPUT_LANGUAGE C#
##|GUI_ENGINE Microsoft Script
##|GUI_LANGUAGE VBScript
##|GUI_BEGIN
Dim cmbDatabases
Dim lstTables
Dim chk

Sub setup()

	If Not input.Contains("lstTables") Or Not input.Contains("txtPath") Then

		ui.Title = "Gerador de DataLayer (Oracle)."
		ui.Width  = 340
		ui.Height = 575

		' Grab default output path
		Dim sOutputPath
		sOutputPath = ""
		If input.Contains("defaultOutputPath") Then 
			sOutputPath = input.Item("defaultOutputPath")
		End If

		ui.AddLabel "lblPath", "Caminho de saída: ",  "Selecione o caminho de saída."
		ui.AddTextBox "txtPath", sOutputPath, "Selecione o caminho de saída."
		ui.AddFilePicker "btnPath", "Seleciona o Caminho", "Seleciona o caminho de saída.", "txtPath", true

		ui.AddLabel "lblNamespaceEntidade", "Namespace das Entidades: ",  "Namespace das entidades."
		ui.AddTextBox "txtNamespaceEntidade", "HospitalAnaCosta.SGS.Model", "Informe o Namespace das entidades."			

		ui.AddLabel "lblNamespace", "Namespace DataLayer: ",  "Informe o Namespace da camada de Dados."
		ui.AddTextBox "txtNamespace", "HospitalAnaCosta.SGS.Data", "Namespace da camada de dados."			

		'ui.AddLabel "lblPackage", "Package: ",  "Informe o nome da package."
		'ui.AddTextBox "txtPackageNome", "PKG_" , ""

		ui.AddLabel "lblPrefixo", "Prefixo da procedure: ",  "Informe o prefixo da procedure (não obrigatório)."
		ui.AddTextBox "txtPrefixo", "PRC_" , ""

		ui.AddLabel "lblPrefixoParametro", "Prefixo do Parâmetro: ",  "Caracter identificador do parâmetro do banco."
		ui.AddTextBox "txtPrefixoParametro", "p", ""			

		' List Databases in a ComboBox
		ui.AddLabel "lblDatabases", "Selecione o Database:", "Selecione o Database abaixo."
		Set cmbDatabases = ui.AddComboBox("cmbDatabase", "Selecione o Database.")

		' List Tables in a listbox
		ui.AddLabel "lblTables", "Selecione as tabelas:", "Selecione as tabelas abaixo."
		Set lstTables = ui.AddListBox ("lstTables", "Selecione as tabelas:")
		'lstTables.IsMultiSelect = false
		lstTables.Height = 120

		'Indica se campo inteiro como chave primaria deve utilizar select max na procedure para identity
		'Set utilizaAutoIncremento = ui.AddCheckBox("ckUtilizaAutoIncremento", "Utiliza AutoIncremento para campo Inteiro?", false, "Se chave do tipo inteiro, deseja utilizar autoincremento caso campo não seja Identity?")
		'Set databaseDefault = ui.AddCheckBox("ckDataBaseDefault", "Database default?", true, "Se não for default, o construtor do método DataBaseFactory.CreateDatabase informará a instância correspondente")
		
		' Attach the onchange event to the cmbDatabases control.
		setupDatabaseDropdown cmbDatabases
		
		ui.ShowGUI = true
	Else 
		ui.ShowGUI = false
	End if

End Sub

Sub setupDatabaseDropdown(cmbDatabases)
	cmbDatabases.BindData MyMeta.Databases
	
	If Not MyMeta.DefaultDatabase Is Nothing Then
		cmbDatabases.SelectedValue = MyMeta.DefaultDatabase.Name
		bindTables cmbDatabases.SelectedValue
	End If
	
	cmbDatabases.AttachEvent "onchange", "cmbDatabases_onchange"
End Sub

Sub bindTables(sDatabase)
	Set db = MyMeta.Databases(sDatabase)
	lstTables.BindData(db.Tables)
End Sub

' Event Handler
Sub cmbDatabases_onchange(control)
	Set cmbDatabases = ui.item("cmbDatabase")
	bindTables cmbDatabases.SelectedText
End Sub
##|GUI_END
##|BODY_MODE Markup
##|BODY_ENGINE Microsoft Script
##|BODY_LANGUAGE VBScript
##|BODY_TAG_START <%
##|BODY_TAG_END %>
##|BODY_BEGIN
<%
'------------------------------------------------------------------------------
' Gerador_DataLayer_Oracle.vbgen
' Data de Criação : 22/12/2006
' Autor: Carlos Eduardo Pereira de Araujo
'
' OBSERVAÇÕES IMPORTANTES:
' Configurar: Default settings
' -Alterar DbTarget para DbType
' -Alterar Language para C#
'
' Última Alteração: 25/01/2007
'------------------------------------------------------------------------------
Dim bFirst
Dim name
Dim alias
Dim objTable
Dim objColumn
Dim tableNames
Dim language
Dim databaseName
Dim database
Dim namespace
Dim namespaceEntidade
Dim prefixoParametro
Dim props
Dim bOtherColumns
Dim strPrefixoProcedure

Dim nomeTabela
Dim nomeProcedure

prefix = input.Item("prefix")
chkDatabaseDefault = input.Item("ckDataBaseDefault")
chkUtilizaAutoIncrementoCampoInteiro = input.Item("ckUtilizaAutoIncremento")

' Prefixo da procedure
strPrefixoProcedure = ucase(input.Item("txtPrefixo"))

' Recupera o caracter Prefixo do Parametro
prefixoParametro = input.Item("txtPrefixoParametro")

' Grab the namespace
namespace = input.Item("txtNamespace")

' Grab the namespace Entidade
namespaceEntidade = input.Item("txtNamespaceEntidade")

' Grab the choices the user made in our UI Script (see Interface Code tab)
Set tableNames = input.Item("lstTables")

databaseName  = input.Item("cmbDatabase")
Set database = MyMeta.Databases(databaseName)

' Loop through the tables the user selected and generate the business entities
For intLp = 0 To tableNames.Count - 1

	Set objTable = database.Tables(tablenames.item(intLp))
	Set props = objTable.Properties
	
	bOtherColumns = (objTable.Columns.Count > objTable.PrimaryKeys.Count)
	nomeClasse = objTable.description	
	nomeTabela = Ucase(TrimSpaces(objTable.Alias))
	nomeProcedure = GetNomeProcedure(nomeTabela)
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
' Now we have the table that we desire to build a Business Object From, let us begin.
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

entidadeNegocio = nomeClasse & "VO"

dim bPossuiSequence
dim strPropNameSequence
bPossuiSequence = false
strPropNameSequence = "SEQ:I:" + ucase(objTable.name)
For Each objColumn in objTable.Columns					
	If props.ContainsKey(strPropNameSequence) Then					
		bPossuiSequence = true
		exit for
	End If
Next
%>
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Data.Common;
using HospitalAnaCosta.Framework.Data;
using System.Data.OracleClient;
using <%= TrimSpaces(namespaceEntidade)%>;

namespace <%= TrimSpaces(namespace) %>
{
    internal class <%= nomeClasse%>Data : BaseData
    {
		private string connectionString = "";
		
        #region "Construtor"
        public <%= nomeClasse%>Data()
        {
			connectionString = System.Configuration.ConfigurationManager.ConnectionStrings["ConnectionStringOracle"].ConnectionString;
        }
        #endregion
				
		/// <summary>
        /// Listar todos os registros
        /// </summary>
        public List<%= "<" & entidadeNegocio%>> Listar()
        {
            using (OracleConnection db = new OracleConnection(connectionString))
			{

            List<%= "<" & entidadeNegocio%>> lst<%= entidadeNegocio%> = new List<%= "<" & entidadeNegocio%>>();
            string sqlCommand = "<%=nomeProcedure%>_S";
            using (OracleCommand dbCommand = db.CreateCommand())
			{
            dbCommand.CommandText = sqlCommand;
            dbCommand.CommandType = CommandType.StoredProcedure;
			
			#region "Parametros"
			//Parametro Cursor
            dbCommand.Parameters.Add(CreateParameterCursor());	
<%
			For Each objColumn in objTable.PrimaryKeys
				name = UCase(objColumn.name)%>
			//Parametro <%=name%>
			dbCommand.Parameters.Add(CreateParameter<%=name%>(null));
<%			Next
%>			#endregion	

            DataTableReader dtr = null;

                using (OracleDataAdapter adp = new OracleDataAdapter(dbCommand))
				{
                DataTable dt = new DataTable();
                adp.Fill(dt);
                using (dtr = dt.CreateDataReader())
				{

                while (dtr.Read())
                    lst<%=entidadeNegocio%>.Add(ConvertReaderToEntity(dtr));

                return lst<%=entidadeNegocio%>;
				}
			}
			}
			}
		}


		/// <summary>
        /// Obtém o registro
        /// </summary>
        /// <returns><%= entidadeNegocio%></returns>				
		<%
		bFirst = true		
		output.write "public " & entidadeNegocio & " Obter( "
		For Each objColumn in objTable.PrimaryKeys

			If Not bFirst Then
				output.write ", "
			End If
			output.write objColumn.LanguageType & " " & objColumn.description 

			bFirst = false
		Next
		output.write " )"
		%> 				
		{	
            using (OracleConnection db = new OracleConnection(connectionString))
			{
			<%output.write(entidadeNegocio & " en" & entidadeNegocio & " = null;") + vbcrlf %>			
            string sqlCommand = "<%=nomeProcedure%>_S";
            using (OracleCommand dbCommand = db.CreateCommand())
			{
            dbCommand.CommandText = sqlCommand;
            dbCommand.CommandType = CommandType.StoredProcedure;

			#region "Parametros"
			//Parametro Cursor
            dbCommand.Parameters.Add(CreateParameterCursor());	
<%
			For Each objColumn in objTable.PrimaryKeys
				name = UCase(objColumn.name)%>
			//Parametro <%=name%>
			dbCommand.Parameters.Add(CreateParameter<%=name%>(<%=objColumn.description%>));
<%			Next
%>			#endregion				

			IDataReader connectedReader = null;
				dbCommand.Connection.Open();
                using (connectedReader = dbCommand.ExecuteReader())
				{
                if (connectedReader.Read())
                    <%= "en" & entidadeNegocio  %> = ConvertReaderToEntity(connectedReader);

                return <%= "en" & entidadeNegocio  %>;
            }		
			}
			}
			}
		}
		
		/// <summary>
        /// Exclui o registro
        /// </summary>        
		<%
		bFirst = true		
		output.write "public void Excluir( "
		For Each objColumn in objTable.PrimaryKeys

			If Not bFirst Then
				output.write ", "
			End If
			output.write objColumn.LanguageType & " " & objColumn.description

			bFirst = false
		Next
		output.write " )"			
		%> 				
		{
            using (OracleConnection db = new OracleConnection(connectionString))
			{
            
			string sqlCommand = "<%=nomeProcedure%>_D";
            using (OracleCommand dbCommand = db.CreateCommand())
			{
            dbCommand.CommandText = sqlCommand;
            dbCommand.CommandType = CommandType.StoredProcedure;
			
			#region "Parametros"
<%			For Each objColumn in objTable.PrimaryKeys
				name = UCase(objColumn.name)%>
			//Parametro <%=name%>
			dbCommand.Parameters.Add(CreateParameter<%=name%>(<%=objColumn.description%>));
<%			Next
%>			#endregion				
			
                dbCommand.Connection.Open();
                dbCommand.ExecuteNonQuery();
			}
			}
		}
		
		/// <summary>
        /// Altera o registro
        /// </summary>			
		public void Alterar(<%= entidadeNegocio & " en" & entidadeNegocio%>)
		{	
            using (OracleConnection db = new OracleConnection(connectionString))
			{

			string sqlCommand = "<%=nomeProcedure%>_U";
            using (OracleCommand dbCommand = db.CreateCommand())
			{
            dbCommand.CommandText = sqlCommand;
            dbCommand.CommandType = CommandType.StoredProcedure;
			
			#region "Parametros"
			CreateParametersIncluirAlterar(dbCommand, en<%=entidadeNegocio%>);
			#endregion				
                dbCommand.Connection.Open();
                dbCommand.ExecuteNonQuery();
			}
			}
		}
		
		/// <summary>
        /// Inclui o registro
        /// </summary>			
		public void Incluir(<%= entidadeNegocio & " en" & entidadeNegocio%>)
		{			
            using (OracleConnection db = new OracleConnection(connectionString))
			{

			string sqlCommand = "<%=nomeProcedure%>_I";
            using (OracleCommand dbCommand = db.CreateCommand())
			{
            dbCommand.CommandText = sqlCommand;
            dbCommand.CommandType = CommandType.StoredProcedure;
			
			#region "Parametros"
<%          if (bPossuiSequence) then%>			
			//Parametro Sequence			
            dbCommand.Parameters.Add(CreateParameterSequence());
<%          end if%>
			CreateParametersIncluirAlterar(dbCommand, en<%=entidadeNegocio%>);
			#endregion				
									
                dbCommand.Connection.Open();
                dbCommand.ExecuteNonQuery();
<%              if (bPossuiSequence) then%>				
				//Recupera o valor da Sequence utilizado na procedure
                en<%=entidadeNegocio%>.Idt = Convert.ToInt32(dbCommand.Parameters["pNewIdt"].Value);
<%              end if%>
			}
			}
		}
		
		/// <summary>
        /// Popula a entidade a partir de um datareader
        /// </summary>
        /// <param name="drDados">DataReader com os dados</param>
        /// <returns><%= entidadeNegocio%></returns>
        private <%= entidadeNegocio%> ConvertReaderToEntity(IDataReader drDados)
        {
			<%= entidadeNegocio & " en" & entidadeNegocio  %> = new <%= entidadeNegocio %>();
<%			output.tabLevel = 3
			For Each objColumn in objTable.Columns						
			    nomePropriedade = objColumn.description
				name = GetName(objColumn)

				output.autoTabLn "en" & entidadeNegocio & "." & nomePropriedade & " = " & VerificaTipoColuna(objColumn) & "(""" & ucase(name) & """, drDados);"
			Next 					
			%>
			return en<%= entidadeNegocio%>;			
        }

		/// <summary>
        /// Cria os parameters comuns à Inclusão e Alteração
        /// </summary>
		private void CreateParametersIncluirAlterar(OracleCommand dbCommand, <%= entidadeNegocio%> en<%= entidadeNegocio%>)
        {		
<%			For Each objColumn in objTable.Columns
				nomePropriedade = objColumn.description
				name = UCase(objColumn.name)%>
			//Parametro <%= name%>
			dbCommand.Parameters.Add(CreateParameter<%=name%>(en<%=entidadeNegocio & "." & nomePropriedade%>));
<%			Next%>
		}
		
		#region "Criar OracleParameters"
<%      if (bPossuiSequence) then%>
		private OracleParameter CreateParameterSequence()
		{
			OracleParameter par = new OracleParameter();
			par.Direction = ParameterDirection.Output;
			par.DbType = DbType.Int32;
			par.ParameterName = "pNewIdt";
			return par;
		}		
<%      end if%>
		private OracleParameter CreateParameterCursor()
		{
			OracleParameter par = new OracleParameter();
			par.Direction = ParameterDirection.Output;
			par.OracleType = OracleType.Cursor;
			par.ParameterName = "io_cursor";
			return par; 
		}
<%			
		For Each objColumn in objTable.Columns
			name = uCase(objColumn.name)%>
		public OracleParameter CreateParameter<%=name%>(<%=VerificaTipoColunaNull(objColumn)%> pValue)
		{
			OracleParameter par = new OracleParameter();
			par.ParameterName = "<%=prefixoParametro & name%>";
			par.Direction = ParameterDirection.Input;
			par.DbType = <%=objColumn.DbTargetType%>;
			par.Value = pValue;				
			return par;
		}
<%		Next%>
		#endregion
		
	}
}
<% 
	' Save the output file for this Table
	Dim filename
	filename = input.item("txtPath")

	Dim length
	Dim pos
	lenth = Len(filename)
	pos = InStrRev(filename, "\") 

	If Not pos = lenth Then
		filename = filename & "\"
	End If

	filename = filename & objTable.description & "Data.cs"

	output.save filename, false
	buffer = buffer & output.text
	output.clear
Next '  tableName
	
	output.write buffer
%>

<%
Function TrimSpaces(str)

	Dim tname
	Dim name
	Dim char
	Dim l

	name = ""
	tname = str
	l = Len(tname)

	For j = 1 To l
		char = Mid(tname, j, 1)
		If Not char = " " Then
			name = name & char
		End If
	Next

	TrimSpaces = name
End Function

Function GetNomeProcedure(nomeTabela)
	dim nomeProcedure 
	nomeProcedure = ucase(nomeTabela)
	nomeProcedure = strPrefixoProcedure + mid(nomeTabela,4)
	GetNomeProcedure = nomeProcedure
End Function

Function GetName(str)
	Dim name
	name = lcase(str)
	GetName = UCase(Left(name, 1)) & Right(name, Len(name) -1)
End Function

Function VerificaTipoColunaNull(objColumn)		
	Select Case objColumn.LanguageType
		Case "long", "decimal", "double", "int", "bool", "DateTime", "short"
			VerificaTipoColunaNull = objColumn.LanguageType & "?"
		Case Else
			VerificaTipoColunaNull = objColumn.LanguageType
	End Select	
End Function

Function VerificaTipoColuna(objColumn)	
	
	Select Case objColumn.LanguageType
		Case "string"
			VerificaTipoColuna = "GetAsString"
		Case "long"
			VerificaTipoColuna = "GetAsLong"
		Case "short"
			VerificaTipoColuna = "GetAsShort"
		Case "decimal"
			VerificaTipoColuna = "GetAsDecimal"
		Case "double"
			VerificaTipoColuna = "GetAsDouble"
		Case "bool"
			VerificaTipoColuna = "GetAsBoolean"
		Case "int"
			VerificaTipoColuna = "GetAsInt"
		Case "DateTime"
			VerificaTipoColuna = "GetAsDateTime"
			
	End Select	
End Function

%>
##|BODY_END
