//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------



[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="IEwsClient")]
public interface IEwsClient
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEwsClient/SendClientLog", ReplyAction="http://tempuri.org/IEwsClient/SendClientLogResponse")]
    string SendClientLog(System.Guid packageServerGuid, string compressedText);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEwsClient/SendClientLog", ReplyAction="http://tempuri.org/IEwsClient/SendClientLogResponse")]
    System.Threading.Tasks.Task<string> SendClientLogAsync(System.Guid packageServerGuid, string compressedText);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEwsClient/SendXml", ReplyAction="http://tempuri.org/IEwsClient/SendXmlResponse")]
    string[] SendXml(string integrationHospitalType, string xml);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEwsClient/SendXml", ReplyAction="http://tempuri.org/IEwsClient/SendXmlResponse")]
    System.Threading.Tasks.Task<string[]> SendXmlAsync(string integrationHospitalType, string xml);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEwsClient/SendHl7Message2_3", ReplyAction="http://tempuri.org/IEwsClient/SendHl7Message2_3Response")]
    string SendHl7Message2_3(string token, string message);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEwsClient/SendHl7Message2_3", ReplyAction="http://tempuri.org/IEwsClient/SendHl7Message2_3Response")]
    System.Threading.Tasks.Task<string> SendHl7Message2_3Async(string token, string message);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEwsClient/SendXml_DynamicToken", ReplyAction="http://tempuri.org/IEwsClient/SendXml_DynamicTokenResponse")]
    string[] SendXml_DynamicToken(string dynamicToken, string integrationHospitalType, string xml);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEwsClient/SendXml_DynamicToken", ReplyAction="http://tempuri.org/IEwsClient/SendXml_DynamicTokenResponse")]
    System.Threading.Tasks.Task<string[]> SendXml_DynamicTokenAsync(string dynamicToken, string integrationHospitalType, string xml);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEwsClient/SendHl7Message2_3_DynamicToken", ReplyAction="http://tempuri.org/IEwsClient/SendHl7Message2_3_DynamicTokenResponse")]
    string SendHl7Message2_3_DynamicToken(string dynamicToken, string token, string message);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEwsClient/SendHl7Message2_3_DynamicToken", ReplyAction="http://tempuri.org/IEwsClient/SendHl7Message2_3_DynamicTokenResponse")]
    System.Threading.Tasks.Task<string> SendHl7Message2_3_DynamicTokenAsync(string dynamicToken, string token, string message);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEwsClient/SendClientLog_DynamicToken", ReplyAction="http://tempuri.org/IEwsClient/SendClientLog_DynamicTokenResponse")]
    string SendClientLog_DynamicToken(string dynamicToken, string compressedText);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEwsClient/SendClientLog_DynamicToken", ReplyAction="http://tempuri.org/IEwsClient/SendClientLog_DynamicTokenResponse")]
    System.Threading.Tasks.Task<string> SendClientLog_DynamicTokenAsync(string dynamicToken, string compressedText);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEwsClient/SendHl7Message", ReplyAction="http://tempuri.org/IEwsClient/SendHl7MessageResponse")]
    string SendHl7Message(string integrationId, string message);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEwsClient/SendHl7Message", ReplyAction="http://tempuri.org/IEwsClient/SendHl7MessageResponse")]
    System.Threading.Tasks.Task<string> SendHl7MessageAsync(string integrationId, string message);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEwsClient/SendHl7Message_DynamicToken", ReplyAction="http://tempuri.org/IEwsClient/SendHl7Message_DynamicTokenResponse")]
    string SendHl7Message_DynamicToken(string dynamicToken, string integrationId, string message);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEwsClient/SendHl7Message_DynamicToken", ReplyAction="http://tempuri.org/IEwsClient/SendHl7Message_DynamicTokenResponse")]
    System.Threading.Tasks.Task<string> SendHl7Message_DynamicTokenAsync(string dynamicToken, string integrationId, string message);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEwsClient/SendCSVMessage", ReplyAction="http://tempuri.org/IEwsClient/SendCSVMessageResponse")]
    string[] SendCSVMessage(string integrationId, string message, char separatorType);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEwsClient/SendCSVMessage", ReplyAction="http://tempuri.org/IEwsClient/SendCSVMessageResponse")]
    System.Threading.Tasks.Task<string[]> SendCSVMessageAsync(string integrationId, string message, char separatorType);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEwsClient/SendCSVMessage_DynamicToken", ReplyAction="http://tempuri.org/IEwsClient/SendCSVMessage_DynamicTokenResponse")]
    string[] SendCSVMessage_DynamicToken(string dynamicToken, string integrationId, string message, char separatorType);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEwsClient/SendCSVMessage_DynamicToken", ReplyAction="http://tempuri.org/IEwsClient/SendCSVMessage_DynamicTokenResponse")]
    System.Threading.Tasks.Task<string[]> SendCSVMessage_DynamicTokenAsync(string dynamicToken, string integrationId, string message, char separatorType);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IEwsClientChannel : IEwsClient, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class EwsClientClient : System.ServiceModel.ClientBase<IEwsClient>, IEwsClient
{
    
    public EwsClientClient()
    {
    }
    
    public EwsClientClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public EwsClientClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public EwsClientClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public EwsClientClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public string SendClientLog(System.Guid packageServerGuid, string compressedText)
    {
        return base.Channel.SendClientLog(packageServerGuid, compressedText);
    }
    
    public System.Threading.Tasks.Task<string> SendClientLogAsync(System.Guid packageServerGuid, string compressedText)
    {
        return base.Channel.SendClientLogAsync(packageServerGuid, compressedText);
    }
    
    public string[] SendXml(string integrationHospitalType, string xml)
    {
        return base.Channel.SendXml(integrationHospitalType, xml);
    }
    
    public System.Threading.Tasks.Task<string[]> SendXmlAsync(string integrationHospitalType, string xml)
    {
        return base.Channel.SendXmlAsync(integrationHospitalType, xml);
    }
    
    public string SendHl7Message2_3(string token, string message)
    {
        return base.Channel.SendHl7Message2_3(token, message);
    }
    
    public System.Threading.Tasks.Task<string> SendHl7Message2_3Async(string token, string message)
    {
        return base.Channel.SendHl7Message2_3Async(token, message);
    }
    
    public string[] SendXml_DynamicToken(string dynamicToken, string integrationHospitalType, string xml)
    {
        return base.Channel.SendXml_DynamicToken(dynamicToken, integrationHospitalType, xml);
    }
    
    public System.Threading.Tasks.Task<string[]> SendXml_DynamicTokenAsync(string dynamicToken, string integrationHospitalType, string xml)
    {
        return base.Channel.SendXml_DynamicTokenAsync(dynamicToken, integrationHospitalType, xml);
    }
    
    public string SendHl7Message2_3_DynamicToken(string dynamicToken, string token, string message)
    {
        return base.Channel.SendHl7Message2_3_DynamicToken(dynamicToken, token, message);
    }
    
    public System.Threading.Tasks.Task<string> SendHl7Message2_3_DynamicTokenAsync(string dynamicToken, string token, string message)
    {
        return base.Channel.SendHl7Message2_3_DynamicTokenAsync(dynamicToken, token, message);
    }
    
    public string SendClientLog_DynamicToken(string dynamicToken, string compressedText)
    {
        return base.Channel.SendClientLog_DynamicToken(dynamicToken, compressedText);
    }
    
    public System.Threading.Tasks.Task<string> SendClientLog_DynamicTokenAsync(string dynamicToken, string compressedText)
    {
        return base.Channel.SendClientLog_DynamicTokenAsync(dynamicToken, compressedText);
    }
    
    public string SendHl7Message(string integrationId, string message)
    {
        return base.Channel.SendHl7Message(integrationId, message);
    }
    
    public System.Threading.Tasks.Task<string> SendHl7MessageAsync(string integrationId, string message)
    {
        return base.Channel.SendHl7MessageAsync(integrationId, message);
    }
    
    public string SendHl7Message_DynamicToken(string dynamicToken, string integrationId, string message)
    {
        return base.Channel.SendHl7Message_DynamicToken(dynamicToken, integrationId, message);
    }
    
    public System.Threading.Tasks.Task<string> SendHl7Message_DynamicTokenAsync(string dynamicToken, string integrationId, string message)
    {
        return base.Channel.SendHl7Message_DynamicTokenAsync(dynamicToken, integrationId, message);
    }
    
    public string[] SendCSVMessage(string integrationId, string message, char separatorType)
    {
        return base.Channel.SendCSVMessage(integrationId, message, separatorType);
    }
    
    public System.Threading.Tasks.Task<string[]> SendCSVMessageAsync(string integrationId, string message, char separatorType)
    {
        return base.Channel.SendCSVMessageAsync(integrationId, message, separatorType);
    }
    
    public string[] SendCSVMessage_DynamicToken(string dynamicToken, string integrationId, string message, char separatorType)
    {
        return base.Channel.SendCSVMessage_DynamicToken(dynamicToken, integrationId, message, separatorType);
    }
    
    public System.Threading.Tasks.Task<string[]> SendCSVMessage_DynamicTokenAsync(string dynamicToken, string integrationId, string message, char separatorType)
    {
        return base.Channel.SendCSVMessage_DynamicTokenAsync(dynamicToken, integrationId, message, separatorType);
    }
}
